// JavaScript –¥–ª—è Telegram Mini App "Road to Your Dream"

const BACKEND_BASE_URL = "https://road-to-your-dream-app-imtd.onrender.com";

class RoadToDreamApp {
    constructor() {
        console.log('RoadToDreamApp constructor called');
        this.currentScreen = 'map-screen';
        this.demoData = null;
        this.init();
    }

    init() {
        this.setupTelegramWebApp();
        this.showScreen(this.currentScreen);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç—É
        this.initializeDemoData();
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
    setupCompleteButton() {
        const completeBtn = document.getElementById('complete-step-btn');
        if (completeBtn) {
            completeBtn.addEventListener('click', handleCompleteStep);
            console.log('Complete button setup completed');
        } else {
            console.warn('Complete button not found');
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
    showScreen(screenId) {
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        const screens = document.querySelectorAll('.screen');
        screens.forEach(screen => {
            screen.classList.add('hidden');
        });

        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
        const targetScreen = document.getElementById(screenId);
        if (targetScreen) {
            targetScreen.classList.remove('hidden');
            this.currentScreen = screenId;
            
            // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
            this.renderCurrentScreen();
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
    initializeDemoData() {
        console.log('Initializing demo data...');
        const demoData = {
            user: {
                name: "–ê–ª–µ–∫—Å–µ–π",
                avatar: "üë®‚Äçüíª",
                currentGoal: "–ò–∑—É—á–∏—Ç—å Python",
                progress: 65
            },
            goals: [
                {
                    id: 1,
                    title: "–ò–∑—É—á–∏—Ç—å Python",
                    description: "–û—Å–≤–æ–∏—Ç—å –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python",
                    category: "–û–±—É—á–µ–Ω–∏–µ",
                    priority: "–≤—ã—Å–æ–∫–∏–π",
                    progress: 65,
                    status: "current",
                    deadline: "2024-03-15"
                },
                {
                    id: 2,
                    title: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
                    description: "–°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
                    category: "–ü—Ä–æ–µ–∫—Ç—ã",
                    priority: "–≤—ã—Å–æ–∫–∏–π",
                    progress: 30,
                    status: "pending",
                    deadline: "2024-04-20"
                },
                {
                    id: 3,
                    title: "–ò–∑—É—á–∏—Ç—å –¥–∏–∑–∞–π–Ω",
                    description: "–û—Å–≤–æ–∏—Ç—å –æ—Å–Ω–æ–≤—ã UI/UX –¥–∏–∑–∞–π–Ω–∞",
                    category: "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ",
                    priority: "—Å—Ä–µ–¥–Ω–∏–π",
                    progress: 100,
                    status: "completed",
                    deadline: "2024-02-10"
                },
                {
                    id: 4,
                    title: "–ù–∞—É—á–∏—Ç—å—Å—è –≥–∏—Ç–∞—Ä–µ",
                    description: "–ò–∑—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –∞–∫–∫–æ—Ä–¥—ã –∏ —Å—ã–≥—Ä–∞—Ç—å 5 –ø–µ—Å–µ–Ω",
                    category: "–•–æ–±–±–∏",
                    priority: "–Ω–∏–∑–∫–∏–π",
                    progress: 15,
                    status: "pending",
                    deadline: "2024-05-30"
                },
                {
                    id: 5,
                    title: "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏",
                    description: "–ü—Ä–æ—á–∏—Ç–∞—Ç—å 10 –∫–Ω–∏–≥ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é",
                    category: "–†–∞–∑–≤–∏—Ç–∏–µ",
                    priority: "—Å—Ä–µ–¥–Ω–∏–π",
                    progress: 40,
                    status: "pending",
                    deadline: "2024-06-15"
                }
            ]
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        this.demoData = demoData;
        console.log('Demo data initialized:', this.demoData);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É
        // this.testMapRender(); // –£–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
        this.renderCurrentScreen();
    }
    
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
    renderCurrentScreen() {
        console.log('renderCurrentScreen called for:', this.currentScreen);
        if (!this.demoData) {
            console.warn('No demo data available');
            return;
        }
        
        switch(this.currentScreen) {
            case 'map-screen':
                console.log('Rendering map with data:', this.demoData);
                renderMap(this.demoData);
                break;
            case 'goals-screen':
                console.log('Rendering goals with data:', this.demoData);
                renderPlan(this.demoData);
                break;
            case 'caravan-screen':
                console.log('Caravan screen - TODO');
                // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä–∞–≤–∞–Ω–∞
                break;
            case 'profile-screen':
                console.log('Rendering profile with data:', this.demoData);
                renderProfile(this.demoData);
                break;
        }
    }




    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
    updateTaskInfo(title, description) {
        const taskTitle = document.querySelector('#task-info h3');
        const taskDescription = document.getElementById('task-description');
        
        if (taskTitle) taskTitle.textContent = title;
        if (taskDescription) taskDescription.textContent = description;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
    setupTelegramWebApp() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Telegram
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            tg.ready();
            tg.expand();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            this.setupTheme(tg);
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            tg.MainButton.setText('–í—ã–ø–æ–ª–Ω–∏—Ç—å');
            tg.MainButton.show();
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            tg.MainButton.onClick(() => {
                handleCompleteStep();
            });
            
            console.log('Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.log('Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã Telegram
    setupTheme(tg) {
        const themeParams = tg.themeParams;
        
        if (themeParams) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã –∫ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
            const root = document.documentElement;
            
            if (themeParams.bg_color) {
                root.style.setProperty('--tg-theme-bg-color', themeParams.bg_color);
            }
            if (themeParams.text_color) {
                root.style.setProperty('--tg-theme-text-color', themeParams.text_color);
            }
            if (themeParams.button_color) {
                root.style.setProperty('--tg-theme-button-color', themeParams.button_color);
            }
            if (themeParams.button_text_color) {
                root.style.setProperty('--tg-theme-button-text-color', themeParams.button_text_color);
            }
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    setTaskInfo(title, description) {
        this.updateTaskInfo(title, description);
    }

    switchToScreen(screenId) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
        switchToScreen(screenId);
        this.currentScreen = screenId;
    }

    getCurrentScreen() {
        return this.currentScreen;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
function setupNavigation() {
    const navigation = document.getElementById('navigation');
    
    if (!navigation) {
        console.warn('–ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤—Å—é –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation.addEventListener('click', (event) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navButton = event.target.closest('.nav-btn');
        
        if (!navButton) {
            return; // –ö–ª–∏–∫ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        }
        
        // –ü–æ–ª—É—á–∞–µ–º data-screen –∞—Ç—Ä–∏–±—É—Ç
        const targetScreenId = navButton.getAttribute('data-screen');
        
        if (!targetScreenId) {
            console.warn('–ö–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ data-screen');
            return;
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω
        switchToScreen(targetScreenId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        updateActiveNavButton(navButton);
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
function switchToScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã (–¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å .hidden)
    const allScreens = document.querySelectorAll('.screen');
    allScreens.forEach(screen => {
        screen.classList.add('hidden');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω (—É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å .hidden)
    const targetScreen = document.getElementById(screenId);
    
    if (targetScreen) {
        targetScreen.classList.remove('hidden');
        console.log(`–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —ç–∫—Ä–∞–Ω: ${screenId}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç
        if (window.roadToDreamApp) {
            window.roadToDreamApp.currentScreen = screenId;
            window.roadToDreamApp.renderCurrentScreen();
        }
    } else {
        console.error(`–≠–∫—Ä–∞–Ω —Å id "${screenId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function updateActiveNavButton(activeButton) {
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å active —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    const allNavButtons = document.querySelectorAll('.nav-btn');
    allNavButtons.forEach(button => {
        button.classList.remove('active');
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å active –∫ —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ
    activeButton.classList.add('active');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
async function handleCompleteStep() {
    const completeBtn = document.getElementById('complete-step-btn');
    
    if (!completeBtn) {
        console.error('–ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    // 1. –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥–≤–æ–π–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è
    completeBtn.disabled = true;
    completeBtn.textContent = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';
    
    try {
        // 2. –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let telegram_id = null;
        
        if (window.Telegram && window.Telegram.WebApp) {
            telegram_id = Telegram.WebApp.initDataUnsafe?.user?.id;
        }
        
        if (!telegram_id) {
            throw new Error('Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        console.log('–í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegram_id);
        
        // 3. –î–µ–ª–∞–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ API –±—ç–∫–µ–Ω–¥–∞
        const response = await fetch(`${BACKEND_BASE_URL}/actions/complete`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                telegram_id: telegram_id
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞:', result);
        
        // 5. –ï—Å–ª–∏ —É—Å–ø–µ—Ö - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –æ—Ç–≤–µ—Ç—É –±—ç–∫–µ–Ω–¥–∞)
        if (result.action || result.message) {
            // –ù–∞—Ö–æ–¥–∏–º .user-avatar –∏ –¥–æ–±–∞–≤–ª—è–µ–º CSS-–∫–ª–∞—Å—Å .animate-jump
            const userAvatar = document.querySelector('.user-avatar');
            if (userAvatar) {
                userAvatar.classList.add('animate-jump');
                
                // –ß–µ—Ä–µ–∑ setTimeout (500ms) —É–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç –∫–ª–∞—Å—Å
                setTimeout(() => {
                    userAvatar.classList.remove('animate-jump');
                }, 500);
            }
            
            // –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–ª–∞—à–∫–µ –Ω–∞ "–û—Ç–ª–∏—á–Ω–æ! –®–∞–≥ —Å–¥–µ–ª–∞–Ω"
            const taskDescription = document.getElementById('task-description');
            if (taskDescription) {
                const originalText = taskDescription.textContent;
                taskDescription.textContent = '–û—Ç–ª–∏—á–Ω–æ! –®–∞–≥ —Å–¥–µ–ª–∞–Ω';
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    taskDescription.textContent = originalText;
                }, 2000);
            }
            
            console.log('–®–∞–≥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
        } else {
            throw new Error(result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —à–∞–≥–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —à–∞–≥–∞:', error);
        
        // 6. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.WebApp.showAlert
        if (window.Telegram && window.Telegram.WebApp) {
            Telegram.WebApp.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        } else {
            // Fallback –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    } finally {
        // 7. –í –±–ª–æ–∫–µ finally —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        completeBtn.disabled = false;
        completeBtn.textContent = '–í—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥';
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
function setupCompleteStepButton() {
    const completeBtn = document.getElementById('complete-step-btn');
    
    if (!completeBtn) {
        console.warn('–ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    completeBtn.addEventListener('click', handleCompleteStep);
    
    console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    const mapScreen = document.getElementById('map-screen');
    const planScreen = document.getElementById('plan-screen');
    const profileScreen = document.getElementById('profile-screen');
    const taskInfo = document.getElementById('task-info');
    const taskDescription = document.getElementById('task-description');
    const completeStepBtn = document.getElementById('complete-step-btn');
    const navButtons = document.querySelectorAll('.nav-btn');
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    setupNavigation();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
    setupCompleteStepButton();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—É
    initializeTheme();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
    setupThemeToggle();
    
    // –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    initializeApp();
});

// –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initializeApp() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
        if (window.Telegram && window.Telegram.WebApp) {
            Telegram.WebApp.ready();
            
            // –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ Telegram.WebApp.initDataUnsafe.user.id
            const telegram_id = Telegram.WebApp.initDataUnsafe?.user?.id;
            
            if (telegram_id) {
                console.log('Telegram ID:', telegram_id);
                
                // –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
                const data = await fetchDataFromServer(telegram_id);
                
                // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
                renderApp(data);
            } else {
                console.warn('Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        } else {
            console.log('Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        window.roadToDreamApp = new RoadToDreamApp();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
        window.roadToDreamApp = new RoadToDreamApp();
    }
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
async function fetchDataFromServer(telegram_id) {
    try {
        const response = await fetch(`${BACKEND_BASE_URL}/users/${telegram_id}/data`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞:', data);
        return data;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
function renderApp(data) {
    console.log('–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
    
    // 1. –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    const mapCanvas = document.getElementById('map-canvas');
    const planContent = document.getElementById('plan-content');
    const profileContent = document.getElementById('profile-content');
    
    if (mapCanvas) mapCanvas.innerHTML = '';
    if (planContent) planContent.innerHTML = '';
    if (profileContent) profileContent.innerHTML = '';
    
    if (!data) {
        console.log('–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
        return;
    }
    
    // 2. –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã
    renderMap(data);
    
    // 3. –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–ª–∞–Ω–∞
    renderPlan(data);
    
    // 4. –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
    renderProfile(data);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã –≤ —Å—Ç–∏–ª–µ Duolingo
function renderMap(data) {
    console.log('renderMap called with data:', data);
    const mapCanvas = document.getElementById('map-canvas');
    console.log('mapCanvas element:', mapCanvas);
    if (!mapCanvas) {
        console.error('map-canvas element not found!');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    mapCanvas.innerHTML = '';
    console.log('Starting to render Duolingo-style map...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–ª–∞—Å—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if (!data || !data.goals) {
        console.warn('No goals data available for map rendering');
        return;
    }
    
    const goals = data.goals;
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ä—Ç—ã –≤ —Å—Ç–∏–ª–µ Duolingo
    createDuolingoMap(mapCanvas, goals, data.user);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ —Å—Ç–∏–ª–µ Duolingo
function createDuolingoMap(container, goals, user) {
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã
    const mapContainer = document.createElement('div');
    mapContainer.className = 'duolingo-map';
    
    // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å (road) –¥–ª—è —Ü–µ–ª–µ–π
    const road = document.createElement('div');
    road.className = 'duolingo-road';
    
    // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã —Ü–µ–ª–µ–π –∏ —Å–æ–µ–¥–∏–Ω—è–µ–º –∏—Ö
    goals.forEach((goal, index) => {
        // –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª —Ü–µ–ª–∏
        const goalNode = createGoalNode(goal, index);
        road.appendChild(goalNode);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–ª–∏)
        if (index < goals.length - 1) {
            const connector = createConnector(goal, goals[index + 1], index);
            road.appendChild(connector);
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É
    const startPoint = createStartPoint(user);
    road.insertBefore(startPoint, road.firstChild);
    
    mapContainer.appendChild(road);
    container.appendChild(mapContainer);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É–∑–ª–∞ —Ü–µ–ª–∏
function createGoalNode(goal, index) {
    const node = document.createElement('div');
    node.className = `duolingo-node ${goal.status}`;
    node.setAttribute('data-goal-id', goal.id);
    node.setAttribute('data-category', goal.category);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    let icon = '';
    if (goal.status === 'completed') {
        icon = '‚úÖ';
        node.classList.add('completed');
    } else if (goal.status === 'current') {
        icon = 'üî•';
        node.classList.add('current');
    } else {
        icon = getCategoryIcon(goal.category);
        node.classList.add('locked');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∑–ª–∞
    node.innerHTML = `
        <div class="node-icon">${icon}</div>
        <div class="node-progress" style="--progress: ${goal.progress}%"></div>
        <div class="node-title">${goal.title}</div>
        <div class="node-category">${goal.category}</div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    node.addEventListener('click', (e) => {
        console.log('Goal node clicked:', goal.title, 'Status:', goal.status);
        e.stopPropagation();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Ü–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        console.log('Showing selection menu for goal:', goal.title);
        showGoalSelectionMenu(goal);
    });
    
    return node;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
function createConnector(currentGoal, nextGoal, index) {
    const connector = document.createElement('div');
    connector.className = 'duolingo-connector';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–∏
    if (currentGoal.status === 'completed') {
        connector.classList.add('completed');
    } else if (currentGoal.status === 'current') {
        connector.classList.add('active');
        } else {
        connector.classList.add('locked');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—è
    if (currentGoal.status === 'current') {
        const progressBar = document.createElement('div');
        progressBar.className = 'connector-progress';
        progressBar.style.width = `${currentGoal.progress}%`;
        connector.appendChild(progressBar);
    }
    
    return connector;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏
function createStartPoint(user) {
    const startPoint = document.createElement('div');
    startPoint.className = 'duolingo-start';
    
    startPoint.innerHTML = `
        <div class="start-avatar">${user?.avatar || 'üë§'}</div>
        <div class="start-label">–ù–∞—á–∞–ª–æ –ø—É—Ç–∏</div>
    `;
    
    return startPoint;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
function showGoalSelectionMenu(selectedGoal) {
    console.log('Showing selection menu for:', selectedGoal.title);
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.className = 'goal-selection-modal';
    modal.innerHTML = `
        <div class="modal-overlay">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>–í—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å</h3>
                    <button class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="goal-info">
                        <div class="goal-icon-large">${
                            selectedGoal.status === 'completed' ? '‚úÖ' : 
                            selectedGoal.status === 'current' ? 'üî•' : 
                            getCategoryIcon(selectedGoal.category)
                        }</div>
                        <h4>${selectedGoal.title}</h4>
                        <p>${selectedGoal.description}</p>
                        <div class="goal-stats">
                            <span class="stat">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${selectedGoal.category}</span>
                            <span class="stat">–ü—Ä–æ–≥—Ä–µ—Å—Å: ${selectedGoal.progress}%</span>
                            <span class="stat">–î–µ–¥–ª–∞–π–Ω: ${selectedGoal.deadline}</span>
                            <span class="stat">–°—Ç–∞—Ç—É—Å: ${
                                selectedGoal.status === 'completed' ? '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' :
                                selectedGoal.status === 'current' ? '–¢–µ–∫—É—â–∞—è' :
                                '–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è'
                            }</span>
                        </div>
                    </div>
                    <div class="selection-actions">
                        <button class="btn-secondary" id="view-details">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
                        <button class="btn-primary" id="select-goal" ${
                            selectedGoal.status === 'current' ? 'disabled' : ''
                        }>${
                            selectedGoal.status === 'current' ? '–£–∂–µ —Ç–µ–∫—É—â–∞—è' :
                            selectedGoal.status === 'completed' ? '–°–¥–µ–ª–∞—Ç—å —Ç–µ–∫—É—â–µ–π' :
                            '–°–¥–µ–ª–∞—Ç—å —Ç–µ–∫—É—â–µ–π'
                        }</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    modal.querySelector('.modal-close').addEventListener('click', () => {
        modal.remove();
    });
    
    modal.querySelector('#view-details').addEventListener('click', () => {
        modal.remove();
        showGoalDetails(selectedGoal);
    });
    
    modal.querySelector('#select-goal').addEventListener('click', () => {
        console.log('Select goal button clicked for:', selectedGoal.title);
        console.log('Selected goal object:', selectedGoal);
        
        // –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω, —É–±–∏—Ä–∞–µ–º alert
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        if (!window.roadToDreamApp) {
            console.error('RoadToDreamApp not found!');
            alert('–û—à–∏–±–∫–∞: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        if (!window.roadToDreamApp.demoData) {
            console.error('Demo data not found!');
            alert('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        selectGoal(selectedGoal);
        modal.remove();
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
    modal.querySelector('.modal-overlay').addEventListener('click', (e) => {
        if (e.target === modal.querySelector('.modal-overlay')) {
            modal.remove();
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
function selectGoal(goal) {
    console.log('Selecting goal:', goal.title);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    if (window.roadToDreamApp && window.roadToDreamApp.demoData) {
        console.log('Before update - goals:', window.roadToDreamApp.demoData.goals.map(g => ({title: g.title, status: g.status})));
        
        // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ ID
        const goalInData = window.roadToDreamApp.demoData.goals.find(g => g.id === goal.id);
        if (!goalInData) {
            console.error('Goal not found in data!', goal);
            return;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
        window.roadToDreamApp.demoData.goals.forEach(g => {
            if (g.status === 'current') {
                console.log('Resetting current goal:', g.title);
                g.status = 'pending';
            }
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
        goalInData.status = 'current';
        console.log('Setting new current goal:', goalInData.title);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        window.roadToDreamApp.demoData.user.currentGoal = goalInData.title;
        window.roadToDreamApp.demoData.user.progress = goalInData.progress;
        
        console.log('After update - goals:', window.roadToDreamApp.demoData.goals.map(g => ({title: g.title, status: g.status})));
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
        console.log('Re-rendering screen...');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
        if (window.roadToDreamApp.currentScreen === 'map-screen') {
            renderMap(window.roadToDreamApp.demoData);
        } else if (window.roadToDreamApp.currentScreen === 'goals-screen') {
            renderPlan(window.roadToDreamApp.demoData);
        } else if (window.roadToDreamApp.currentScreen === 'profile-screen') {
            renderProfile(window.roadToDreamApp.demoData);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification(`–¶–µ–ª—å "${goalInData.title}" –≤—ã–±—Ä–∞–Ω–∞ –∫–∞–∫ —Ç–µ–∫—É—â–∞—è!`);
    } else {
        console.error('RoadToDreamApp or demoData not found!');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        padding: 16px 24px;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(16, 185, 129, 0.3);
        z-index: 1000;
        font-weight: 600;
        animation: slideInRight 0.3s ease;
    `;
    
    document.body.appendChild(notification);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏ –∫–∞—Ä—Ç—ã
function createMapGrid(mapCanvas) {
    const grid = document.createElement('div');
    grid.className = 'map-grid';
    
    // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    for (let i = 0; i <= 10; i++) {
        const line = document.createElement('div');
        line.className = 'grid-line vertical';
        line.style.left = `${i * 10}%`;
        grid.appendChild(line);
    }
    
    // –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    for (let i = 0; i <= 10; i++) {
        const line = document.createElement('div');
        line.className = 'grid-line horizontal';
        line.style.top = `${i * 10}%`;
        grid.appendChild(line);
    }
    
    mapCanvas.appendChild(grid);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–≥–µ–Ω–¥—ã –∫–∞—Ä—Ç—ã
function createMapLegend(mapCanvas) {
    const legend = document.createElement('div');
    legend.className = 'map-legend';
    
    legend.innerHTML = `
        <div class="legend-item">
            <div class="legend-dot current"></div>
            <span>–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å</span>
        </div>
        <div class="legend-item">
            <div class="legend-dot completed"></div>
            <span>–í—ã–ø–æ–ª–Ω–µ–Ω–∞</span>
        </div>
        <div class="legend-item">
            <div class="legend-dot pending"></div>
            <span>–í –ø–ª–∞–Ω–∞—Ö</span>
        </div>
        <div class="legend-item">
            <div class="legend-avatar"></div>
            <span>–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è</span>
        </div>
    `;
    
    mapCanvas.appendChild(legend);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —Ü–µ–ª–∏
function showGoalDetails(goal) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ü–µ–ª–∏
    const modal = document.createElement('div');
    modal.className = 'goal-modal';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>${goal.title}</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <p class="goal-description">${goal.description}</p>
                <div class="goal-meta">
                    <div class="meta-item">
                        <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${goal.category}
                    </div>
                    <div class="meta-item">
                        <strong>–ü—Ä–æ–≥—Ä–µ—Å—Å:</strong> ${goal.progress}%
                    </div>
                    <div class="meta-item">
                        <strong>–°—Ç–∞—Ç—É—Å:</strong> ${goal.completed ? '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' : (goal.current ? '–¢–µ–∫—É—â–∞—è' : '–í –ø–ª–∞–Ω–∞—Ö')}
                    </div>
                </div>
                <div class="goal-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${goal.progress}%"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn-secondary modal-close">–ó–∞–∫—Ä—ã—Ç—å</button>
                ${!goal.completed ? '<button class="btn-primary">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>' : ''}
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.querySelectorAll('.modal-close').forEach(btn => {
        btn.addEventListener('click', () => {
            modal.remove();
        });
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–ª–∞–Ω–∞
function renderPlan(data) {
    console.log('renderPlan called with data:', data);
    const planContent = document.getElementById('plan-content');
    if (!planContent) {
        console.error('plan-content element not found');
        return;
    }
    
    if (!data || !data.goals) {
        console.warn('No goals data available for plan rendering');
        console.log('Available data:', data);
        return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–ª–∞—Å—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const goals = data.goals;
    console.log('Goals for plan rendering:', goals);
    
    let planHTML = '<div class="plan-container">';
    
    planHTML += '<div class="plan-header">';
    planHTML += '<h2>üéØ –í–∞—à–∏ —Ü–µ–ª–∏</h2>';
    planHTML += '<p class="plan-subtitle">–í–∞—à –ø—É—Ç—å –∫ –º–µ—á—Ç–µ —á–µ—Ä–µ–∑ –¥–æ—Å—Ç–∏–∂–∏–º—ã–µ —ç—Ç–∞–ø—ã</p>';
    planHTML += '</div>';
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalGoals = goals.length;
    const completedGoals = goals.filter(goal => goal.status === 'completed').length;
    const currentGoals = goals.filter(goal => goal.status === 'current').length;
    const overallProgress = Math.round((completedGoals / totalGoals) * 100);
    
    planHTML += '<div class="plan-stats">';
    planHTML += `
        <div class="stat-card">
            <div class="stat-number">${totalGoals}</div>
            <div class="stat-label">–í—Å–µ–≥–æ —Ü–µ–ª–µ–π</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${completedGoals}</div>
            <div class="stat-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${currentGoals}</div>
            <div class="stat-label">–í —Ä–∞–±–æ—Ç–µ</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${overallProgress}%</div>
            <div class="stat-label">–ü—Ä–æ–≥—Ä–µ—Å—Å</div>
        </div>
    `;
    planHTML += '</div>';
    
    // –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    planHTML += '<div class="overall-progress">';
    planHTML += '<div class="progress-label">–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</div>';
    planHTML += `<div class="progress-bar"><div class="progress-fill" style="width: ${overallProgress}%"></div></div>`;
    planHTML += '</div>';
    
    // –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
    planHTML += '<div class="goals-section">';
    planHTML += '<h3>–í–∞—à–∏ —Ü–µ–ª–∏</h3>';
        planHTML += '<ul class="goals-list">';
        
    goals.forEach((goal, index) => {
        const statusClass = goal.status === 'completed' ? 'completed' : (goal.status === 'current' ? 'current' : 'pending');
        const statusIcon = goal.status === 'completed' ? '‚úÖ' : (goal.status === 'current' ? 'üéØ' : '‚è≥');
        const categoryIcon = getCategoryIcon(goal.category);
            
            planHTML += `
            <li class="goal-item ${statusClass}" data-goal-id="${goal.id}">
                    <div class="goal-header">
                        <span class="goal-icon">${statusIcon}</span>
                    <div class="goal-info">
                        <h4 class="goal-title">${goal.title}</h4>
                        <div class="goal-category">
                            <span class="category-icon">${categoryIcon}</span>
                            <span class="category-name">${goal.category}</span>
                    </div>
                    </div>
                    <div class="goal-priority priority-${goal.priority.toLowerCase()}">${goal.priority}</div>
                </div>
                <p class="goal-description">${goal.description}</p>
                
                <div class="goal-progress">
                    <div class="progress-info">
                        <span class="progress-text">–ü—Ä–æ–≥—Ä–µ—Å—Å: ${goal.progress}%</span>
                        <span class="deadline">${goal.deadline}</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${goal.progress}%"></div>
                    </div>
                    </div>
                </li>
            `;
        });
        
        planHTML += '</ul>';
        planHTML += '</div>';
    
    planHTML += '</div>';
    
    console.log('Generated plan HTML:', planHTML);
    console.log('Setting planContent.innerHTML...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ CSS –∫–ª–∞—Å—Å–æ–≤
    const simpleTest = `
        <div style="padding: 20px; color: white;">
            <h2>üéØ –í–∞—à–∏ —Ü–µ–ª–∏</h2>
            <p>–í—Å–µ–≥–æ —Ü–µ–ª–µ–π: ${totalGoals}</p>
            <p>–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedGoals}</p>
            <p>–í —Ä–∞–±–æ—Ç–µ: ${currentGoals}</p>
            <div>
                ${goals.map(goal => `<p>${goal.title} - ${goal.progress}%</p>`).join('')}
            </div>
        </div>
    `;
    
    planContent.innerHTML = simpleTest;
    
    console.log('Simple test content set successfully');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryIcon(category) {
    const icons = {
        '–û–±—É—á–µ–Ω–∏–µ': 'üìö',
        '–ü—Ä–æ–µ–∫—Ç—ã': 'üöÄ',
        '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ': 'üé®',
        '–•–æ–±–±–∏': 'üé∏',
        '–†–∞–∑–≤–∏—Ç–∏–µ': 'üí™',
        '–ö–∞—Ä—å–µ—Ä–∞': 'üíº',
        '–î–∏–∑–∞–π–Ω': 'üé®',
        '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'üìñ',
        '–ó–¥–æ—Ä–æ–≤—å–µ': 'üèÉ‚Äç‚ôÇÔ∏è',
        '–§–∏–Ω–∞–Ω—Å—ã': 'üí∞',
        '–û—Ç–Ω–æ—à–µ–Ω–∏—è': '‚ù§Ô∏è'
    };
    return icons[category] || 'üéØ';
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
function renderProfile(data) {
    const profileContent = document.getElementById('profile-content');
    if (!profileContent) return;
    
    let profileHTML = '<div class="profile-container">';
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if (data.user) {
        profileHTML += `
            <div class="user-info">
                <div class="user-avatar-large">
                    ${data.user.avatar || 'üë§'}
                </div>
                <h2>${data.user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h2>
                <p class="current-goal">–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å: ${data.user.currentGoal || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}</p>
            </div>
        `;
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    profileHTML += '<div class="stats-section">';
    profileHTML += '<h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>';
    
    const totalGoals = data.goals ? data.goals.length : 0;
    const completedGoals = data.goals ? data.goals.filter(goal => goal.status === 'completed').length : 0;
    const currentGoals = data.goals ? data.goals.filter(goal => goal.status === 'current').length : 0;
    const completionRate = totalGoals > 0 ? Math.round((completedGoals / totalGoals) * 100) : 0;
    
    profileHTML += `
        <div class="stats-grid">
            <div class="stat-item">
                <div class="stat-number">${totalGoals}</div>
                <div class="stat-label">–í—Å–µ–≥–æ —Ü–µ–ª–µ–π</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">${completedGoals}</div>
                <div class="stat-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">${currentGoals}</div>
                <div class="stat-label">–í —Ä–∞–±–æ—Ç–µ</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">${completionRate}%</div>
                <div class="stat-label">–ü—Ä–æ–≥—Ä–µ—Å—Å</div>
            </div>
        </div>
    `;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if (data.stats) {
        profileHTML += '<div class="additional-stats">';
        if (data.stats.daysActive) {
            profileHTML += `<p>–ê–∫—Ç–∏–≤–µ–Ω ${data.stats.daysActive} –¥–Ω–µ–π</p>`;
        }
        if (data.stats.streak) {
            profileHTML += `<p>–°–µ—Ä–∏—è: ${data.stats.streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥</p>`;
        }
        profileHTML += '</div>';
    }
    
    profileHTML += '</div>';
    profileHTML += '</div>';
    
    profileContent.innerHTML = profileHTML;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
function toggleTheme() {
    const body = document.body;
    const themeToggle = document.getElementById('theme-toggle');
    const currentTheme = body.getAttribute('data-theme');
    
    if (currentTheme === 'dark') {
        body.setAttribute('data-theme', 'light');
        themeToggle.setAttribute('data-theme', 'light');
        localStorage.setItem('theme', 'light');
    } else {
        body.setAttribute('data-theme', 'dark');
        themeToggle.setAttribute('data-theme', 'dark');
        localStorage.setItem('theme', 'dark');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–º—ã
function initializeTheme() {
    const savedTheme = localStorage.getItem('theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const theme = savedTheme || (prefersDark ? 'dark' : 'light');
    
    document.body.setAttribute('data-theme', theme);
    document.getElementById('theme-toggle').setAttribute('data-theme', theme);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
function setupThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle');
    
    if (!themeToggle) {
        console.warn('–ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    themeToggle.addEventListener('click', toggleTheme);
    console.log('–ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = RoadToDreamApp;
}
