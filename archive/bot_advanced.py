import asyncio
import logging
import aiohttp
import json
from dotenv import load_dotenv
import os
from ai_agent_advanced import get_ai_motivation, get_ai_stats, reset_ai_stats

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

# URL –¥–ª—è Telegram Bot API
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

class AdvancedBot:
    def __init__(self, token):
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{token}"
        self.offset = 0
        self.current_api = 'auto'  # –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π API
    
    async def get_updates(self):
        """–ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        url = f"{self.api_url}/getUpdates"
        params = {
            'offset': self.offset,
            'timeout': 30
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get('result', [])
                return []
    
    async def send_message(self, chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        url = f"{self.api_url}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data) as response:
                return await response.json()
    
    async def answer_callback_query(self, callback_query_id):
        """–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å"""
        url = f"{self.api_url}/answerCallbackQuery"
        data = {
            'callback_query_id': callback_query_id
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data) as response:
                return await response.json()
    
    async def handle_start(self, chat_id):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        keyboard = {
            "inline_keyboard": [
                [
                    {
                        "text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å –º–æ–π –ø—É—Ç—å",
                        "web_app": {
                            "url": "https://google.com"
                        }
                    }
                ],
                [
                    {"text": "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", "callback_data": "motivation"},
                    {"text": "üéØ –¢–µ—Å—Ç AI", "callback_data": "test_ai"}
                ],
                [
                    {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "stats"},
                    {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API", "callback_data": "api_settings"}
                ]
            ]
        }
        
        message_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞!\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ –º–µ—á—Ç–µ!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/motivation - –ø–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é\n"
            "/test_ai - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å AI\n"
            "/events - —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è AI\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API\n"
            "/switch_openai - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ OpenAI\n"
            "/switch_gemini - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Gemini\n"
            "/switch_auto - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä API"
        )
        
        await self.send_message(chat_id, message_text, keyboard)
    
    async def handle_motivation(self, chat_id):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º API
            motivation = await get_ai_motivation('motivation_needed', self.current_api)
            await self.send_message(chat_id, f"üí™ {motivation}")
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} (API: {self.current_api})")
        except Exception as e:
            await self.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {e}")
    
    async def handle_test_ai(self, chat_id):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI"""
        events = [
            '7_days_streak',
            'first_goal', 
            'milestone_reached',
            'goal_completed',
            'motivation_needed'
        ]
        
        message_text = f"ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI-–º–æ–¥—É–ª—è (API: {self.current_api}):\n\n"
        
        for i, event in enumerate(events, 1):
            try:
                motivation = await get_ai_motivation(event, self.current_api)
                message_text += f"{i}. **{event}**:\n{motivation}\n\n"
            except Exception as e:
                message_text += f"{i}. **{event}**: –û—à–∏–±–∫–∞ - {str(e)}\n\n"
        
        await self.send_message(chat_id, message_text)
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    
    async def handle_events_list(self, chat_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        events_text = (
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è AI:\n\n"
            "‚Ä¢ 7_days_streak - 7-–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è\n"
            "‚Ä¢ first_goal - –ø–µ—Ä–≤–∞—è —Ü–µ–ª—å\n"
            "‚Ä¢ milestone_reached - –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≤–µ—Ö–∞\n"
            "‚Ä¢ goal_completed - —Ü–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            "‚Ä¢ motivation_needed - –Ω—É–∂–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è\n"
            "‚Ä¢ weekly_review - –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_ai –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π"
        )
        await self.send_message(chat_id, events_text)
    
    async def handle_stats(self, chat_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
        try:
            stats = get_ai_stats()
            if stats:
                total_requests = (stats['openai_success'] + stats['openai_failures'] + 
                                stats['gemini_success'] + stats['gemini_failures'] + 
                                stats['fallback_used'])
                
                message_text = (
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI:\n\n"
                    f"ü§ñ OpenAI:\n"
                    f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {stats['openai_success']}\n"
                    f"  ‚ùå –û—à–∏–±–æ–∫: {stats['openai_failures']}\n\n"
                    f"üîÆ Gemini:\n"
                    f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {stats['gemini_success']}\n"
                    f"  ‚ùå –û—à–∏–±–æ–∫: {stats['gemini_failures']}\n\n"
                    f"üîÑ Fallback: {stats['fallback_used']}\n\n"
                    f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
                    f"üéØ –¢–µ–∫—É—â–∏–π API: {self.current_api}"
                )
            else:
                message_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            await self.send_message(chat_id, message_text)
        except Exception as e:
            await self.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def handle_api_settings(self, chat_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API"""
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "ü§ñ OpenAI", "callback_data": "switch_openai"},
                    {"text": "üîÆ Gemini", "callback_data": "switch_gemini"}
                ],
                [
                    {"text": "üéØ –ê–≤—Ç–æ", "callback_data": "switch_auto"},
                    {"text": "üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", "callback_data": "reset_stats"}
                ]
            ]
        }
        
        message_text = (
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API:\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {self.current_api}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π API:"
        )
        
        await self.send_message(chat_id, message_text, keyboard)
    
    async def switch_api(self, api_type: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç API"""
        if api_type in ['openai', 'gemini', 'auto']:
            self.current_api = api_type
            return f"API –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: {api_type}"
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø API"
    
    async def process_update(self, update):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            if text == '/start':
                await self.handle_start(chat_id)
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            elif text == '/motivation':
                await self.handle_motivation(chat_id)
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /motivation –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            elif text == '/test_ai':
                await self.handle_test_ai(chat_id)
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /test_ai –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            elif text == '/events':
                await self.handle_events_list(chat_id)
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /events –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            elif text == '/stats':
                await self.handle_stats(chat_id)
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            elif text == '/switch_openai':
                result = await self.switch_api('openai')
                await self.send_message(chat_id, f"‚úÖ {result}")
            elif text == '/switch_gemini':
                result = await self.switch_api('gemini')
                await self.send_message(chat_id, f"‚úÖ {result}")
            elif text == '/switch_auto':
                result = await self.switch_api('auto')
                await self.send_message(chat_id, f"‚úÖ {result}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
        elif 'callback_query' in update:
            callback = update['callback_query']
            chat_id = callback['message']['chat']['id']
            data = callback.get('data', '')
            
            if data == 'motivation':
                await self.handle_motivation(chat_id)
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω callback motivation –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            elif data == 'test_ai':
                await self.handle_test_ai(chat_id)
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω callback test_ai –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            elif data == 'stats':
                await self.handle_stats(chat_id)
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω callback stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            elif data == 'api_settings':
                await self.handle_api_settings(chat_id)
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω callback api_settings –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            elif data == 'switch_openai':
                result = await self.switch_api('openai')
                await self.send_message(chat_id, f"‚úÖ {result}")
            elif data == 'switch_gemini':
                result = await self.switch_api('gemini')
                await self.send_message(chat_id, f"‚úÖ {result}")
            elif data == 'switch_auto':
                result = await self.switch_api('auto')
                await self.send_message(chat_id, f"‚úÖ {result}")
            elif data == 'reset_stats':
                reset_ai_stats()
                await self.send_message(chat_id, "üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!")
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await self.answer_callback_query(callback['id'])
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        print("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("–û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        while True:
            try:
                updates = await self.get_updates()
                
                for update in updates:
                    self.offset = update['update_id'] + 1
                    await self.process_update(update)
                
                await asyncio.sleep(1)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(5)

# –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot = AdvancedBot(BOT_TOKEN)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        await bot.run()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
