/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)
 */

const BASE_URL = "https://road-to-your-dream-app-imtd.onrender.com";

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ò-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
class AIManagerTester {
    constructor(telegramId) {
        this.telegramId = telegramId;
        this.baseURL = BASE_URL;
        console.log(`‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ç–µ—Å—Ç–µ—Ä –¥–ª—è Telegram ID: ${telegramId}`);
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async registerUser() {
        try {
            const response = await fetch(`${this.baseURL}/register`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    telegram_id: this.telegramId,
                    username: `test_user_${this.telegramId}`,
                    first_name: "–¢–µ—Å—Ç–æ–≤—ã–π",
                    last_name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                })
            });
            
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            
            const user = await response.json();
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', user);
            return user;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            throw error;
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–ª–∏
     */
    async createTestGoals() {
        const goals = [
            {
                goal_type: "career",
                description: "–ù–∞—É—á–∏—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ Python –∑–∞ 3 –º–µ—Å—è—Ü–∞"
            },
            {
                goal_type: "health",
                description: "–ü—Ä–æ–±–µ–≥–∞—Ç—å 5 –∫–º —Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"
            },
            {
                goal_type: "learning",
                description: "–ò–∑—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –¥–æ —É—Ä–æ–≤–Ω—è B2"
            }
        ];
        
        try {
            const response = await fetch(`${this.baseURL}/goals`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    telegram_id: this.telegramId,
                    goals: goals
                })
            });
            
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            
            const result = await response.json();
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${goals.length} —Ü–µ–ª–µ–π:`, result);
            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–µ–π:', error);
            throw error;
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
     * –í–ê–ñ–ù–û: API —Å–æ–∑–¥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞—Å—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 –¥–µ–π—Å—Ç–≤–∏–µ
     */
    async createTestActions(daysCount = 5) {
        console.log(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: API —Å–æ–∑–¥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É.`);
        console.log(`   –°–æ–∑–¥–∞—é –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...`);
        
        try {
            const response = await fetch(`${this.baseURL}/actions/complete`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    telegram_id: this.telegramId
                })
            });
            
            if (!response.ok) {
                const errorData = await response.json();
                if (response.status === 200 || errorData.message?.includes('—É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ')) {
                    console.log('‚ÑπÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                    return [{ message: '–î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' }];
                }
                throw new Error(`HTTP ${response.status}: ${JSON.stringify(errorData)}`);
            }
            
            const result = await response.json();
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:`, result.action?.action_date || '—Å–µ–≥–æ–¥–Ω—è');
            return [result];
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:', error);
            throw error;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ë–î
     */
    async verifyDataInDB() {
        console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í –ë–ê–ó–ï...\n');
        const data = await this.getUserData();
        
        const hasUser = !!data.user;
        const hasGoals = data.goals && data.goals.length > 0;
        const hasActions = data.daily_actions && data.daily_actions.length > 0;
        
        console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:');
        console.log(`   ${hasUser ? '‚úÖ' : '‚ùå'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î`);
        console.log(`   ${hasGoals ? '‚úÖ' : '‚ùå'} –¶–µ–ª–∏ –≤ –ë–î (${data.goals?.length || 0})`);
        console.log(`   ${hasActions ? '‚úÖ' : '‚ùå'} –î–µ–π—Å—Ç–≤–∏—è –≤ –ë–î (${data.daily_actions?.length || 0})`);
        
        if (hasUser && hasGoals && hasActions) {
            console.log('\n‚úÖ –í–°–ï –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù–´ –í –ë–ê–ó–£!\n');
        } else {
            console.log('\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –î–ê–ù–ù–´–ï –ù–ï –°–û–•–†–ê–ù–ò–õ–ò–°–¨\n');
        }
        
        return { hasUser, hasGoals, hasActions, data };
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserData() {
        try {
            const response = await fetch(`${this.baseURL}/users/${this.telegramId}/data`);
            
            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            
            const data = await response.json();
            console.log('\nüìä –î–ê–ù–ù–´–ï –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
            console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
            console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`, {
                id: data.user?.id,
                telegram_id: data.user?.telegram_id,
                username: data.user?.username,
                created_at: data.user?.created_at
            });
            console.log(`\nüéØ –¶–µ–ª–∏ (${data.goals?.length || 0}):`);
            data.goals?.forEach((goal, i) => {
                console.log(`   ${i + 1}. [${goal.goal_type}] ${goal.description} ${goal.is_completed ? '‚úÖ' : '‚è≥'}`);
            });
            console.log(`\n‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (${data.daily_actions?.length || 0}):`);
            data.daily_actions?.slice(0, 10).forEach((action, i) => {
                console.log(`   ${i + 1}. ${action.action_date}`);
            });
            if (data.daily_actions?.length > 10) {
                console.log(`   ... –∏ –µ—â–µ ${data.daily_actions.length - 10} –¥–µ–π—Å—Ç–≤–∏–π`);
            }
            console.log(`\nüìã –ö–∞—Ä—Ç—ã (${data.cards?.length || 0}):`);
            data.cards?.forEach((card, i) => {
                console.log(`   ${i + 1}. [${card.card_type}] ${card.title} - ${card.status}`);
            });
            console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
            
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ò–ò-–º–µ–Ω–µ–¥–∂–µ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º ID
     */
    initAIManager() {
        if (!window.aiManagerUI || !window.aiManagerUI.manager) {
            console.error('‚ùå –ò–ò-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.');
            return false;
        }
        
        window.aiManagerUI.manager.setTelegramId(this.telegramId);
        console.log(`‚úÖ –ò–ò-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ Telegram ID: ${this.telegramId}`);
        return true;
    }
    
    /**
     * –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö + –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò
     */
    async setup(createGoals = true, createActions = true, actionsCount = 5) {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n');
        
        try {
            // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.registerUser();
            
            // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–π
            if (createGoals) {
                await this.createTestGoals();
            }
            
            // 3. –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            if (createActions) {
                // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è "—á–∏—Å—Ç–æ–≥–æ" —Ç–µ—Å—Ç–∞
                // (–í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥)
                await this.createTestActions(actionsCount);
            }
            
            // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if (!this.initAIManager()) {
                console.warn('‚ö†Ô∏è –ò–ò-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ initAIManager() –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.');
            }
            
            // 5. –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            const data = await this.getUserData();
            
            // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –ë–î
            await this.verifyDataInDB();
            
            console.log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            console.log('\nüìã –ß–¢–û –î–ê–õ–¨–®–ï:');
            console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
            console.log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ò–ò-–ú–µ–Ω–µ–¥–∂–µ—Ä"');
            console.log('2. –ù–∞–∂–º–∏—Ç–µ "üß≠ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?" - –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
            console.log('3. –ù–∞–∂–º–∏—Ç–µ "üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞" - –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
            console.log('4. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ');
            console.log('\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:');
            console.log('   tester.testNavigation()');
            console.log('   tester.testAnalyzeProgress()');
            console.log('   tester.testAdvice("–ö–∞–∫ –Ω–∞—á–∞—Ç—å?")');
            console.log('   tester.verifyDataInDB()  - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î');
            console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
            
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
            throw error;
        }
    }
    
    /**
     * –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    async testNavigation() {
        if (!this.initAIManager()) return;
        
        console.log('üß≠ –¢–µ—Å—Ç–∏—Ä—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é...');
        try {
            await window.aiManagerUI.testNavigation();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        }
    }
    
    /**
     * –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    async testAnalyzeProgress() {
        if (!this.initAIManager()) return;
        
        console.log('üìä –¢–µ—Å—Ç–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...');
        try {
            await window.aiManagerUI.testAnalyzeProgress();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        }
    }
    
    /**
     * –¢–µ—Å—Ç —Å–æ–≤–µ—Ç–∞
     */
    async testAdvice(question = "–ö–∞–∫ –ª—É—á—à–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è?") {
        if (!this.initAIManager()) return;
        
        console.log(`üí° –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–≤–µ—Ç: "${question}"`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        try {
            const result = await window.aiManagerUI.manager.getAdvice(question);
            console.log('‚úÖ –û—Ç–≤–µ—Ç:', result);
            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        }
    }
    
    /**
     * –¢–µ—Å—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏
     */
    async testMotivation() {
        if (!this.initAIManager()) return;
        
        console.log('üí™ –¢–µ—Å—Ç–∏—Ä—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é...');
        try {
            await window.aiManagerUI.testMotivation();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        }
    }
}

// ========== –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï ==========

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç - —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–µ—Ä –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 * 
 * @param {number} telegramId - Telegram ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {object} options - –û–ø—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
async function quickTest(telegramId = 123456789, options = {}) {
    const {
        createGoals = true,
        createActions = true,
        actionsCount = 5
    } = options;
    
    const tester = new AIManagerTester(telegramId);
    await tester.setup(createGoals, createActions, actionsCount);
    
    // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.tester = tester;
    
    return tester;
}

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üß™ –¢–ï–°–¢–ï–† –ò–ò-–ú–ï–ù–ï–î–ñ–ï–†–ê                                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìñ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:

1. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (—Å–æ–∑–¥–∞–µ—Ç –≤—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):
   quickTest(123456789)
   
   –ò–ª–∏ —Å –æ–ø—Ü–∏—è–º–∏:
   quickTest(123456789, {
       createGoals: true,
       createActions: true,
       actionsCount: 5
   })

2. –ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:
   const tester = new AIManagerTester(123456789);
   await tester.registerUser();
   await tester.createTestGoals();
   await tester.createTestActions(5);
   tester.initAIManager();

3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:
   await tester.testNavigation();
   await tester.testAnalyzeProgress();
   await tester.testAdvice("–ö–∞–∫ –Ω–∞—á–∞—Ç—å?");
   await tester.testMotivation();

4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:
   await tester.getUserData();

üìù –ü–†–ò–ú–ï–ß–ê–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π Telegram ID
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å —Ä–∞–∑–Ω—ã–º–∏ ID

`);

