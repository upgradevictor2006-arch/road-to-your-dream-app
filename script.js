// JavaScript –¥–ª—è Telegram Mini App "Road to Your Dream"
// –í–ï–†–°–ò–Ø: v19 - –ò–°–ü–†–ê–í–õ–ï–ù–ê –ö–ù–û–ü–ö–ê "–î–ê–õ–ï–ï" –í –í–´–ë–û–†–ï –ü–ï–†–ò–û–î–ê

console.log('üöÄ –ó–∞–≥—Ä—É–∂–µ–Ω script.js –≤–µ—Ä—Å–∏–∏ 29 - –£–ë–†–ê–ù–ê –ê–ù–ò–ú–ê–¶–ò–Ø!');
console.log('üîß –£–ë–†–ê–ù–ê –ê–ù–ò–ú–ê–¶–ò–Ø –î–í–ò–ñ–ï–ù–ò–Ø –®–ê–ì–û–í –ü–†–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ò!');

const BACKEND_BASE_URL = "https://road-to-your-dream-app-imtd.onrender.com";

class RoadToDreamApp {
    constructor() {
        console.log('RoadToDreamApp constructor called');
        this.currentScreen = 'map';
        this.newGoalData = null; // –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π —Ü–µ–ª–∏
        this.currentMap = null; // –¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞
        this.maps = []; // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∫–∞—Ä—Ç
        this.currentMapId = null; // ID —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
        this.loadMapsFromStorage();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∫–∞—Ä–∞–≤–∞–Ω–∞
        console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CaravanModule:', typeof CaravanModule);
        if (typeof CaravanModule !== 'undefined') {
            this.caravanModule = new CaravanModule(this);
            console.log('‚úÖ –ú–æ–¥—É–ª—å –∫–∞—Ä–∞–≤–∞–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', this.caravanModule);
        } else {
            console.error('‚ùå CaravanModule –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É caravan.js');
            this.caravanModule = null;
        }
        
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∫–∞—Ä—Ç—ã
        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MapModule:', typeof MapModule);
        console.log('MapModule –≤ window:', typeof window.MapModule);
        if (typeof MapModule !== 'undefined') {
            this.mapModule = new MapModule(this);
            console.log('–ú–æ–¥—É–ª—å –∫–∞—Ä—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.error('MapModule –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É map.js');
            console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:', Object.keys(window).filter(key => key.includes('Module')));
            this.mapModule = null;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –≥–∞—Ä–∞–∂–∞
        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GarageModule:', typeof GarageModule);
        console.log('GarageModule –≤ window:', typeof window.GarageModule);
        if (typeof GarageModule !== 'undefined') {
            this.garageModule = new GarageModule(this);
            console.log('‚úÖ –ú–æ–¥—É–ª—å –≥–∞—Ä–∞–∂–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.error('‚ùå GarageModule –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É garage.js');
            console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:', Object.keys(window).filter(key => key.includes('Module')));
            this.garageModule = null;
        }
        
        this.init();
    }

    init() {
        this.setupTelegramWebApp();
        this.showScreen(this.currentScreen);
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
    showScreen(screenId) {
            this.currentScreen = screenId;
            this.renderCurrentScreen();
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
    renderCurrentScreen() {
        console.log('Rendering screen:', this.currentScreen);
        
        const appContainer = document.getElementById('app-container');
        if (!appContainer) return;
        
        switch(this.currentScreen) {
            case 'map':
                if (this.mapModule) {
                    this.mapModule.renderMapScreen();
                } else {
                    console.error('–ú–æ–¥—É–ª—å –∫–∞—Ä—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
                    this.renderMapScreen(); // Fallback
                }
                break;
            case 'caravan':
                if (this.caravanModule) {
                    this.caravanModule.renderCaravanScreen();
                } else {
                    console.error('–ú–æ–¥—É–ª—å –∫–∞—Ä–∞–≤–∞–Ω–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
                    this.renderGarageScreen(); // Fallback
                }
                break;
            case 'garage':
                console.log('üéØ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω –≥–∞—Ä–∞–∂–∞...');
                if (this.garageModule) {
                    console.log('‚úÖ –ú–æ–¥—É–ª—å –≥–∞—Ä–∞–∂–∞ –Ω–∞–π–¥–µ–Ω, —Ä–µ–Ω–¥–µ—Ä–∏–º...');
                    this.garageModule.renderGarageScreen();
                } else {
                    console.error('‚ùå –ú–æ–¥—É–ª—å –≥–∞—Ä–∞–∂–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
                    this.renderGarageScreen(); // Fallback
                }
                break;
        }
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —ç–∫—Ä–∞–Ω–∞ –∫–∞—Ä—Ç—ã (fallback)
    renderMapScreen() {
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback renderMapScreen - –º–æ–¥—É–ª—å –∫–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        const appContainer = document.getElementById('app-container');
        appContainer.innerHTML = `
            <div class="screen-content">
                <h2>üó∫Ô∏è –ö–∞—Ä—Ç–∞</h2>
                <p>–ú–æ–¥—É–ª—å –∫–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ map.js</p>
            </div>
        `;
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç—ã —Å –ª–µ–Ω—Ç–æ–π —à–∞–≥–æ–≤
    

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
    showCreateMapModal() {
        console.log('üéØ showCreateMapModal –≤—ã–∑–≤–∞–Ω –≤ script.js');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        let title = '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã';
        let subtitle = '–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ü–µ–ª—å';
        
        if (this.caravanCreationData && this.caravanCreationData.isCaravanGoal) {
            title = `–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ –¥–ª—è –∫–∞—Ä–∞–≤–∞–Ω–∞ "${this.caravanCreationData.caravanName}"`;
            subtitle = '–û–ø–∏—à–∏—Ç–µ –æ–±—â—É—é —Ü–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞—Ä–∞–≤–∞–Ω–∞';
        }
        
        const modalHTML = `
            <div class="modal-overlay active" id="create-map-modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="modal-title">${title}</h2>
                        <p class="modal-subtitle">${subtitle}</p>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label class="form-label" for="goal-title">–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏</label>
                            <input 
                                type="text" 
                                id="goal-title" 
                                class="form-input" 
                                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"
                                maxlength="100"
                            >
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="goal-description">–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                            <textarea 
                                id="goal-description" 
                                class="form-input" 
                                placeholder="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ü–µ–ª—å..."
                                rows="3"
                                maxlength="500"
                                style="resize: none; min-height: 80px;"
                            ></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" id="cancel-btn">–û—Ç–º–µ–Ω–∞</button>
                        <button class="btn btn-primary" id="next-btn" disabled>–î–∞–ª–µ–µ</button>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ body
        document.body.insertAdjacentHTML('beforeend', modalHTML);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            this.setupCreateMapModalEvents();
        }, 50);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            const goalInput = document.getElementById('goal-title');
            const nextBtn = document.getElementById('next-btn');
            
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:');
            console.log('üîç –ü–æ–ª–µ –≤–≤–æ–¥–∞:', goalInput);
            console.log('üîç –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ":', nextBtn);
            console.log('üîç –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è:', goalInput?.value);
            console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:', {
                disabled: nextBtn?.disabled,
                opacity: nextBtn?.style.opacity,
                text: nextBtn?.textContent
            });
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
            if (goalInput && nextBtn) {
                console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ...');
                goalInput.value = '–¢–µ—Å—Ç';
                goalInput.dispatchEvent(new Event('input', { bubbles: true }));
                console.log('üß™ –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:', {
                    disabled: nextBtn.disabled,
                    opacity: nextBtn.style.opacity
                });
            }
        }, 100);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    setupCreateMapModalEvents() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã');
        
        const goalInput = document.getElementById('goal-title');
        const nextBtn = document.getElementById('next-btn');
        const cancelBtn = document.getElementById('cancel-btn');

        console.log('–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', {
            goalInput: !!goalInput,
            nextBtn: !!nextBtn,
            cancelBtn: !!cancelBtn
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        if (nextBtn) {
            console.log('üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"');
            nextBtn.addEventListener('click', (e) => {
                console.log('üéØ –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –Ω–∞–∂–∞—Ç–∞!');
                console.log('üéØ Event:', e);
                console.log('üéØ Target:', e.target);
                e.preventDefault();
                e.stopPropagation();
                this.nextStep();
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        cancelBtn.addEventListener('click', () => {
            // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ –¥–ª—è –∫–∞—Ä–∞–≤–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ä–∞–≤–∞–Ω—É
            if (this.caravanCreationData && this.caravanCreationData.isCaravanGoal) {
                this.currentScreen = 'caravan';
                this.renderCurrentScreen();
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω–∞
            this.closeCreateMapModal(true);
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
        if (goalInput && nextBtn) {
            console.log('üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞');
            console.log('üîß –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', {
                goalInput: goalInput,
                nextBtn: nextBtn,
                goalInputId: goalInput.id,
                nextBtnId: nextBtn.id
            });
            
            // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ input
            goalInput.addEventListener('input', (e) => {
                const value = e.target.value.trim();
                console.log('üìù –í–≤–æ–¥ –≤ –ø–æ–ª–µ —Ü–µ–ª–∏:', value, '–¥–ª–∏–Ω–∞:', value.length);
                console.log('üìù –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', {
                    disabled: nextBtn.disabled,
                    opacity: nextBtn.style.opacity
                });
                
                nextBtn.disabled = value.length < 3;
                
                if (value.length >= 3) {
                    nextBtn.style.opacity = '1';
                    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
                } else {
                    nextBtn.style.opacity = '0.5';
                    console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
                }
                
                console.log('üìù –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:', {
                    disabled: nextBtn.disabled,
                    opacity: nextBtn.style.opacity
                });
            });
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
            document.addEventListener('input', (e) => {
                if (e.target && e.target.id === 'goal-title') {
                    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –ø–æ–ª—è —Ü–µ–ª–∏');
                    const value = e.target.value.trim();
                    const nextBtnDel = document.getElementById('next-btn');
                    if (nextBtnDel) {
                        nextBtnDel.disabled = value.length < 3;
                        nextBtnDel.style.opacity = value.length >= 3 ? '1' : '0.5';
                        console.log('üîÑ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', {
                            disabled: nextBtnDel.disabled,
                            opacity: nextBtnDel.style.opacity
                        });
                    }
                }
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            console.log('üîç –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ":', {
                disabled: nextBtn.disabled,
                opacity: nextBtn.style.opacity,
                text: nextBtn.textContent
            });
        } else {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é:', {
                goalInput: !!goalInput,
                nextBtn: !!nextBtn
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
        if (goalInput) {
            console.log('üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞');
            goalInput.addEventListener('keypress', (e) => {
                console.log('‚å®Ô∏è –ö–ª–∞–≤–∏—à–∞ –Ω–∞–∂–∞—Ç–∞:', e.key);
                if (e.key === 'Enter' && !nextBtn.disabled) {
                    console.log('‚å®Ô∏è Enter –Ω–∞–∂–∞—Ç, –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º nextStep');
                    e.preventDefault();
                    this.nextStep();
                } else {
                    console.log('‚å®Ô∏è Enter –Ω–∞–∂–∞—Ç, –Ω–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –¥—Ä—É–≥–∞—è –∫–ª–∞–≤–∏—à–∞');
                }
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
        const modal = document.getElementById('create-map-modal');
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeCreateMapModal(true);
            }
        });
    }

    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
    closeCreateMapModal(clearCaravanData = false) {
        const modal = document.getElementById('create-map-modal');
        if (modal) {
            modal.classList.remove('active');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ
        if (clearCaravanData) {
            console.log('üßπ –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
            this.caravanCreationData = null;
        }
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    nextStep() {
        const goalTitle = document.getElementById('goal-title').value.trim();
        const goalDescription = document.getElementById('goal-description').value.trim();

        console.log('üéØ nextStep –≤—ã–∑–≤–∞–Ω');
        console.log('–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:', goalTitle);
        console.log('–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏:', goalDescription);
        console.log('–î–∞–Ω–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω–∞:', this.caravanCreationData);

        if (goalTitle.length < 3) {
            console.log('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ');
            return;
        }
    
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏
        this.newGoalData = {
            title: goalTitle,
            description: goalDescription
        };

        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', this.newGoalData);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –Ω–æ –ù–ï –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω–∞
        const modal = document.getElementById('create-map-modal');
        if (modal) {
            modal.classList.remove('active');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞)
        console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞...');
        this.showPeriodSelectionModal();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    showPeriodSelectionModal() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        let title = '–°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏';
        let subtitle = '–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫?';
        
        if (this.caravanCreationData && this.caravanCreationData.isCaravanGoal) {
            title = `–°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –¥–ª—è –∫–∞—Ä–∞–≤–∞–Ω–∞ "${this.caravanCreationData.caravanName}"`;
            subtitle = '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–±—â–∏–π —Å—Ä–æ–∫ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞—Ä–∞–≤–∞–Ω–∞';
        }
        
        const modalHTML = `
            <div class="modal-overlay active" id="period-selection-modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="modal-title">${title}</h2>
                        <p class="modal-subtitle">${subtitle}</p>
                    </div>
                    <div class="modal-body">
                        <div class="period-type-selector">
                            <button class="period-type-btn active" id="deadline-btn">–î–µ–¥–ª–∞–π–Ω</button>
                            <button class="period-type-btn" id="duration-btn">–ü–µ—Ä–∏–æ–¥</button>
                        </div>
                        
                        <div id="deadline-section">
                            <div class="date-input-group">
                                <label class="form-label" for="goal-deadline">–î–∞—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏</label>
                                <input type="date" id="goal-deadline" class="date-input" min="">
                            </div>
                        </div>
                        
                        <div id="duration-section" style="display: none;">
                            <div class="period-options">
                                <div class="period-option" data-period="week">
                                    <input type="radio" name="period" value="week" class="period-radio" id="period-week">
                                    <div class="period-info">
                                        <div class="period-title">1 –Ω–µ–¥–µ–ª—è</div>
                                        <div class="period-description">–ë—ã—Å—Ç—Ä–∞—è —Ü–µ–ª—å –Ω–∞ –Ω–µ–¥–µ–ª—é</div>
                                    </div>
                                </div>
                                <div class="period-option" data-period="month">
                                    <input type="radio" name="period" value="month" class="period-radio" id="period-month">
                                    <div class="period-info">
                                        <div class="period-title">1 –º–µ—Å—è—Ü</div>
                                        <div class="period-description">–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–∞—è —Ü–µ–ª—å</div>
                                    </div>
                                </div>
                                <div class="period-option" data-period="quarter">
                                    <input type="radio" name="period" value="quarter" class="period-radio" id="period-quarter">
                                    <div class="period-info">
                                        <div class="period-title">3 –º–µ—Å—è—Ü–∞</div>
                                        <div class="period-description">–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Ü–µ–ª—å</div>
                                    </div>
                                </div>
                                <div class="period-option" data-period="half-year">
                                    <input type="radio" name="period" value="half-year" class="period-radio" id="period-half-year">
                                    <div class="period-info">
                                        <div class="period-title">6 –º–µ—Å—è—Ü–µ–≤</div>
                                        <div class="period-description">–°–µ—Ä—å–µ–∑–Ω—ã–π –ø—Ä–æ–µ–∫—Ç</div>
                                    </div>
                                </div>
                                <div class="period-option" data-period="year">
                                    <input type="radio" name="period" value="year" class="period-radio" id="period-year">
                                    <div class="period-info">
                                        <div class="period-title">1 –≥–æ–¥</div>
                                        <div class="period-description">–ú–∞—Å—à—Ç–∞–±–Ω–∞—è —Ü–µ–ª—å</div>
                                    </div>
                                </div>
                                <div class="period-option" data-period="custom">
                                    <input type="radio" name="period" value="custom" class="period-radio" id="period-custom">
                                    <div class="period-info">
                                        <div class="period-title">–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç</div>
                                        <div class="period-description">–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥</div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- –ö–∞—Å—Ç–æ–º–Ω—ã–π –≤–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞ -->
                            <div id="custom-period-section" style="display: none;">
                                <div class="form-group">
                                    <label class="form-label">–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥</label>
                                    <div class="custom-period-input">
                                        <div class="period-input-group">
                                            <div class="period-input-label">–ì–æ–¥—ã</div>
                                            <input type="number" id="custom-years" class="period-number-input" placeholder="0" min="0" max="99">
                                        </div>
                                        <div class="period-input-group">
                                            <div class="period-input-label">–ú–µ—Å—è—Ü—ã</div>
                                            <input type="number" id="custom-months" class="period-number-input" placeholder="0" min="0" max="11">
                                        </div>
                                        <div class="period-input-group">
                                            <div class="period-input-label">–ù–µ–¥–µ–ª–∏</div>
                                            <input type="number" id="custom-weeks" class="period-number-input" placeholder="0" min="0" max="3">
                                        </div>
                                        <div class="period-input-group">
                                            <div class="period-input-label">–î–Ω–∏</div>
                                            <input type="number" id="custom-days" class="period-number-input" placeholder="0" min="0" max="6">
                                        </div>
                                    </div>
                                    <div class="period-total-display">
                                        <div class="period-total-label">–û–±—â–∏–π –ø–µ—Ä–∏–æ–¥</div>
                                        <div class="period-total-days" id="total-period-days">0 –¥–Ω–µ–π</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" id="period-back-btn">–ù–∞–∑–∞–¥</button>
                        <button class="btn btn-primary" id="period-next-btn" disabled>–î–∞–ª–µ–µ</button>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ body
        document.body.insertAdjacentHTML('beforeend', modalHTML);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É (—Å–µ–≥–æ–¥–Ω—è)
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('goal-deadline').min = today;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupPeriodSelectionEvents();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    setupPeriodSelectionEvents() {
        const nextBtn = document.getElementById('period-next-btn');
        const backBtn = document.getElementById('period-back-btn');
        const deadlineBtn = document.getElementById('deadline-btn');
        const durationBtn = document.getElementById('duration-btn');
        const deadlineSection = document.getElementById('deadline-section');
        const durationSection = document.getElementById('duration-section');
        const deadlineInput = document.getElementById('goal-deadline');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nextBtn.addEventListener('click', () => {
            this.nextToPeriodBreakdown();
        });

        backBtn.addEventListener('click', () => {
            this.goBackToGoalInput();
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–µ–¥–ª–∞–π–Ω–æ–º –∏ –ø–µ—Ä–∏–æ–¥–æ–º
        deadlineBtn.addEventListener('click', () => {
            deadlineBtn.classList.add('active');
            durationBtn.classList.remove('active');
            deadlineSection.style.display = 'block';
            durationSection.style.display = 'none';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–µ–¥–ª–∞–π–Ω–∞
            this.validateDeadline();
        });

        durationBtn.addEventListener('click', () => {
            durationBtn.classList.add('active');
            deadlineBtn.classList.remove('active');
            deadlineSection.style.display = 'none';
            durationSection.style.display = 'block';
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–µ–¥–ª–∞–π–Ω–∞
            nextBtn.disabled = true;
            nextBtn.style.opacity = '0.5';
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
            this.setupDurationSelection();
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
        deadlineInput.addEventListener('change', () => {
            this.validateDeadline();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
        const modal = document.getElementById('period-selection-modal');
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closePeriodSelectionModal();
            }
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    setupDurationSelection() {
        const periodOptions = document.querySelectorAll('.period-option');
        const nextBtn = document.getElementById('period-next-btn');
        const customPeriodSection = document.getElementById('custom-period-section');

        periodOptions.forEach(option => {
            const radio = option.querySelector('.period-radio');
            
            option.addEventListener('click', () => {
                // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –æ–ø—Ü–∏–π
                periodOptions.forEach(opt => opt.classList.remove('selected'));
                
                // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
                option.classList.add('selected');
                
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫—É
                radio.checked = true;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –≤–≤–æ–¥
                if (radio.value === 'custom') {
                    customPeriodSection.style.display = 'block';
                    this.setupCustomPeriodHandlers();
        } else {
                    customPeriodSection.style.display = 'none';
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                this.validateDurationSelection();
            });

            radio.addEventListener('change', () => {
                if (radio.checked) {
                    periodOptions.forEach(opt => opt.classList.remove('selected'));
                    option.classList.add('selected');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –≤–≤–æ–¥
                    if (radio.value === 'custom') {
                        customPeriodSection.style.display = 'block';
                        this.setupCustomPeriodHandlers();
        } else {
                        customPeriodSection.style.display = 'none';
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                    this.validateDurationSelection();
                }
            });
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    setupCustomPeriodHandlers() {
        const yearInput = document.getElementById('custom-years');
        const monthInput = document.getElementById('custom-months');
        const weekInput = document.getElementById('custom-weeks');
        const dayInput = document.getElementById('custom-days');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        [yearInput, monthInput, weekInput, dayInput].forEach(input => {
            input.addEventListener('input', () => {
                this.updateCustomPeriodTotal();
            });
        });

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        [yearInput, monthInput, weekInput, dayInput].forEach(input => {
            input.replaceWith(input.cloneNode(true));
        });
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π –ø–µ—Ä–∏–æ–¥
    updateCustomPeriodTotal() {
        const yearInput = document.getElementById('custom-years');
        const monthInput = document.getElementById('custom-months');
        const weekInput = document.getElementById('custom-weeks');
        const dayInput = document.getElementById('custom-days');
        const totalDisplay = document.getElementById('total-period-days');
        const nextBtn = document.getElementById('period-next-btn');

        const years = parseInt(yearInput.value) || 0;
        const months = parseInt(monthInput.value) || 0;
        const weeks = parseInt(weekInput.value) || 0;
        const days = parseInt(dayInput.value) || 0;

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–Ω–∏
        const totalDays = (years * 365) + (months * 30) + (weeks * 7) + days;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        totalDisplay.textContent = `${totalDays} –¥–Ω–µ–π`;

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
        const hasValidPeriod = totalDays > 0;
        nextBtn.disabled = !hasValidPeriod;
        nextBtn.style.opacity = hasValidPeriod ? '1' : '0.5';
    }

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    getCustomPeriodData() {
        const yearInput = document.getElementById('custom-years');
        const monthInput = document.getElementById('custom-months');
        const weekInput = document.getElementById('custom-weeks');
        const dayInput = document.getElementById('custom-days');

        const years = parseInt(yearInput.value) || 0;
        const months = parseInt(monthInput.value) || 0;
        const weeks = parseInt(weekInput.value) || 0;
        const days = parseInt(dayInput.value) || 0;

        return {
            years,
            months,
            weeks,
            days,
            totalDays: (years * 365) + (months * 30) + (weeks * 7) + days
        };
    }


    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    validateDurationSelection() {
        const selectedPeriod = document.querySelector('input[name="period"]:checked');
        const nextBtn = document.getElementById('period-next-btn');
        
        if (!selectedPeriod) {
            nextBtn.disabled = true;
            nextBtn.style.opacity = '0.5';
            return;
        }
        
        if (selectedPeriod.value === 'custom') {
            // –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ø–µ—Ä–∏–æ–¥
            const customData = this.getCustomPeriodData();
            nextBtn.disabled = customData.totalDays === 0;
            nextBtn.style.opacity = customData.totalDays === 0 ? '0.5' : '1';
        } else {
            // –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –≤—Å–µ –û–ö
            nextBtn.disabled = false;
            nextBtn.style.opacity = '1';
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
    validateDeadline() {
        const deadlineInput = document.getElementById('goal-deadline');
        const nextBtn = document.getElementById('period-next-btn');
        
        if (deadlineInput.value) {
            const selectedDate = new Date(deadlineInput.value);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            if (selectedDate >= today) {
                nextBtn.disabled = false;
                nextBtn.style.opacity = '1';
            } else {
                nextBtn.disabled = true;
                nextBtn.style.opacity = '0.5';
            }
    } else {
            nextBtn.disabled = true;
            nextBtn.style.opacity = '0.5';
        }
    }

    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    closePeriodSelectionModal() {
        const modal = document.getElementById('period-selection-modal');
        if (modal) {
            modal.classList.remove('active');
    setTimeout(() => {
                modal.remove();
            }, 300);
        }
    }

    // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–æ–¥—É —Ü–µ–ª–∏
    goBackToGoalInput() {
        this.closePeriodSelectionModal();
        this.showCreateMapModal();
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–±–∏–≤–∫–µ –ø–µ—Ä–∏–æ–¥–∞
    nextToPeriodBreakdown() {
        console.log('üîÑ nextToPeriodBreakdown –≤—ã–∑–≤–∞–Ω');
        console.log('–î–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏:', this.newGoalData);
        console.log('–î–∞–Ω–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω–∞:', this.caravanCreationData);
        
        const deadlineBtn = document.getElementById('deadline-btn');
        const isDeadlineMode = deadlineBtn.classList.contains('active');
        
        if (isDeadlineMode) {
            // –†–µ–∂–∏–º –¥–µ–¥–ª–∞–π–Ω–∞
            const deadlineInput = document.getElementById('goal-deadline');
            if (!deadlineInput.value) return;
            
            const deadline = new Date(deadlineInput.value);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            if (deadline < today) return;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω–∞
            this.newGoalData.periodType = 'deadline';
            this.newGoalData.deadline = deadlineInput.value;
            this.newGoalData.periodDays = Math.ceil((deadline - today) / (1000 * 60 * 60 * 24));
            
            console.log('–í—ã–±—Ä–∞–Ω –¥–µ–¥–ª–∞–π–Ω:', this.newGoalData.deadline, '–¥–Ω–µ–π –¥–æ —Ü–µ–ª–∏:', this.newGoalData.periodDays);
        } else {
            // –†–µ–∂–∏–º –ø–µ—Ä–∏–æ–¥–∞
            const selectedPeriod = document.querySelector('input[name="period"]:checked');
            if (!selectedPeriod) return;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∞
            this.newGoalData.periodType = 'duration';
            this.newGoalData.period = selectedPeriod.value;
            
            if (selectedPeriod.value === 'custom') {
                // –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                const customData = this.getCustomPeriodData();
                this.newGoalData.customPeriod = customData;
                this.newGoalData.periodDays = customData.totalDays;
                console.log('–í—ã–±—Ä–∞–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥:', customData);
            } else {
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                this.newGoalData.periodDays = this.getPeriodDays(selectedPeriod.value);
                console.log('–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥:', this.newGoalData.period, '–¥–Ω–µ–π:', this.newGoalData.periodDays);
            }
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.closePeriodSelectionModal();
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–∑–±–∏–≤–∫–µ –Ω–∞ –ø–æ–¥–ø–µ—Ä–∏–æ–¥—ã
        this.showPeriodBreakdownModal();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ –ø–æ–¥–ø–µ—Ä–∏–æ–¥—ã
    showPeriodBreakdownModal() {
        const totalDays = this.newGoalData.periodDays;
        const breakdown = this.generatePeriodBreakdown(totalDays);

        const modalHTML = `
            <div class="modal-overlay active" id="period-breakdown-modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="modal-title">–†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –ø–æ–¥–ø–µ—Ä–∏–æ–¥—ã</h2>
                        <p class="modal-subtitle">–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ —Ü–µ–ª–∏</p>
                    </div>
                    <div class="modal-body">
                        <div class="breakdown-container" id="breakdown-container">
                            ${this.renderBreakdownHTML(breakdown)}
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" id="breakdown-back-btn">–ù–∞–∑–∞–¥</button>
                        <button class="btn btn-primary" id="breakdown-next-btn">–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É</button>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ body
        document.body.insertAdjacentHTML('beforeend', modalHTML);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupBreakdownModalEvents();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–∞–∑–±–∏–≤–∫–∏
        this.setupBreakdownItemHandlers();
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–∑–±–∏–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∞
    generatePeriodBreakdown(totalDays) {
        let breakdown = [];

        if (totalDays >= 365) {
            // –ì–æ–¥ –∏ –±–æ–ª—å—à–µ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –º–µ—Å—è—Ü—ã
            const years = Math.floor(totalDays / 365);
            const remainingDays = totalDays % 365;
            
            for (let i = 0; i < years; i++) {
                const yearDays = Math.min(365, totalDays - (i * 365));
                breakdown.push({
                    id: `year-${i}`,
                    type: 'year',
                    title: `–ì–æ–¥ ${i + 1}`,
                    task: '',
                    days: yearDays,
                    children: this.generateMonthBreakdown(yearDays, i)
                });
            }
            
            if (remainingDays > 0) {
                breakdown.push({
                    id: 'remaining-period',
                    type: 'period',
                    title: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
                    task: '',
                    days: remainingDays,
                    children: this.generateMonthBreakdown(remainingDays, years)
                });
            }
        } else if (totalDays >= 30) {
            // –ú–µ—Å—è—Ü –∏ –±–æ–ª—å—à–µ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ–¥–µ–ª–∏
            breakdown = this.generateMonthBreakdown(totalDays, 0);
        } else if (totalDays >= 7) {
            // –ù–µ–¥–µ–ª—è –∏ –±–æ–ª—å—à–µ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–Ω–∏
            breakdown = this.generateWeekBreakdown(totalDays);
        } else {
            // –ú–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏ - —Ç–æ–ª—å–∫–æ –¥–Ω–∏
            breakdown = this.generateDayBreakdown(totalDays);
        }

        return breakdown;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–±–∏–≤–∫–∏ –º–µ—Å—è—Ü–µ–≤
    generateMonthBreakdown(totalDays, yearIndex) {
        const months = Math.ceil(totalDays / 30);
        const breakdown = [];

        for (let i = 0; i < months; i++) {
            const monthDays = Math.min(30, totalDays - (i * 30));
            breakdown.push({
                id: `month-${yearIndex}-${i}`,
                type: 'month',
                title: this.getMonthName(i + 1),
                task: '',
                days: monthDays,
                children: monthDays >= 7 ? this.generateWeekBreakdown(monthDays, `${yearIndex}-${i}`) : this.generateDayBreakdown(monthDays, `${yearIndex}-${i}`)
            });
        }

        return breakdown;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–µ–¥–µ–ª—å
    generateWeekBreakdown(totalDays, parentId = '') {
        const weeks = Math.ceil(totalDays / 7);
        const breakdown = [];

        for (let i = 0; i < weeks; i++) {
            const weekDays = Math.min(7, totalDays - (i * 7));
            breakdown.push({
                id: `week-${parentId}-${i}`,
                type: 'week',
                title: `–ù–µ–¥–µ–ª—è ${i + 1}`,
                task: '',
                days: weekDays,
                children: this.generateDayBreakdown(weekDays, `${parentId}-${i}`)
            });
        }

        return breakdown;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥–Ω–µ–π
    generateDayBreakdown(totalDays, parentId = '') {
        const breakdown = [];

        for (let i = 0; i < totalDays; i++) {
            breakdown.push({
                id: `day-${parentId}-${i}`,
                type: 'day',
                title: `–î–µ–Ω—å ${i + 1}`,
                task: '',
                days: 1,
                children: []
            });
        }

        return breakdown;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
    getMonthName(monthNumber) {
        return `${monthNumber}-–π –º–µ—Å—è—Ü`;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
    renderBreakdownHTML(breakdown, level = 0) {
        return breakdown.map(item => {
            const hasChildren = item.children && item.children.length > 0;
            const childrenHTML = hasChildren ? this.renderBreakdownHTML(item.children, level + 1) : '';

            return `
                <div class="breakdown-item" data-id="${item.id}">
                    <div class="breakdown-header" data-toggle-id="${item.id}">
                        <div class="breakdown-left">
                            <svg class="breakdown-icon ${hasChildren ? '' : 'hidden'}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <polyline points="9,18 15,12 9,6"></polyline>
                            </svg>
                            <div class="breakdown-content">
                                <div class="breakdown-title">${item.title}</div>
                                <div class="breakdown-task">${item.task || ''}</div>
            </div>
        </div>
                        <button class="breakdown-edit-btn" data-edit-id="${item.id}">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                <path d="m18.5 2.5 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                            </svg>
                        </button>
                    </div>
                    ${hasChildren ? `
                        <div class="breakdown-children" id="children-${item.id}">
                            ${childrenHTML}
                        </div>
                    ` : ''}
        </div>
    `;
        }).join('');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–∞–∑–±–∏–≤–∫–∏
    setupBreakdownModalEvents() {
        const backBtn = document.getElementById('breakdown-back-btn');
        const nextBtn = document.getElementById('breakdown-next-btn');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        backBtn.addEventListener('click', () => {
            this.closePeriodBreakdownModal();
            this.showPeriodSelectionModal();
        });

        nextBtn.addEventListener('click', () => {
            if (this.mapModule && this.mapModule.createMap) {
                this.mapModule.createMap();
            } else {
                console.error('–ú–æ–¥—É–ª—å –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è createMap –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
        const modal = document.getElementById('period-breakdown-modal');
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closePeriodBreakdownModal();
            }
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑–±–∏–≤–∫–∏
    setupBreakdownItemHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–∫—Ä—ã—Ç–∏—è
        document.querySelectorAll('[data-toggle-id]').forEach(header => {
            header.addEventListener('click', () => {
                const itemId = header.dataset.toggleId;
                this.toggleBreakdownItem(itemId);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        document.querySelectorAll('[data-edit-id]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –∫–ª–∏–∫–∞ –ø–æ header
                const itemId = btn.dataset.editId;
                this.editBreakdownItem(itemId);
            });
        });
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞–∑–±–∏–≤–∫–∏
    toggleBreakdownItem(itemId) {
        const item = document.querySelector(`[data-id="${itemId}"]`);
        const children = document.getElementById(`children-${itemId}`);
        const icon = item.querySelector('.breakdown-icon');

        if (children) {
            children.classList.toggle('expanded');
            icon.classList.toggle('expanded');
        }
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞–∑–±–∏–≤–∫–∏
    editBreakdownItem(itemId) {
        const item = document.querySelector(`[data-id="${itemId}"]`);
        const titleElement = item.querySelector('.breakdown-title');
        const taskElement = item.querySelector('.breakdown-task');
        
        const currentTitle = titleElement.textContent;
        const currentTask = taskElement.textContent;

        this.showEditModal(itemId, currentTitle, currentTask);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    showEditModal(itemId, currentTitle, currentTask) {
        const modalHTML = `
            <div class="edit-modal active" id="edit-breakdown-modal">
                <div class="edit-modal-content">
                    <div class="edit-modal-header">
                        <h3 class="edit-modal-title">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</h3>
                        <p class="edit-modal-subtitle">–ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–¥–∞—á—É</p>
                </div>
                <div class="modal-body">
                        <div class="form-group">
                            <label class="form-label" for="edit-title">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                            <input type="text" id="edit-title" class="form-input" value="${currentTitle}" maxlength="50">
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="edit-task">–ó–∞–¥–∞—á–∞</label>
                            <textarea id="edit-task" class="form-input" rows="3" maxlength="200" placeholder="–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...">${currentTask}</textarea>
                    </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" id="edit-cancel-btn">–û—Ç–º–µ–Ω–∞</button>
                        <button class="btn btn-primary" id="edit-save-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </div>
        </div>
    `;
    
        document.body.insertAdjacentHTML('beforeend', modalHTML);

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        const cancelBtn = document.getElementById('edit-cancel-btn');
        const saveBtn = document.getElementById('edit-save-btn');
        const modal = document.getElementById('edit-breakdown-modal');

        cancelBtn.addEventListener('click', () => {
            this.closeEditModal();
        });

        saveBtn.addEventListener('click', () => {
            const title = document.getElementById('edit-title').value.trim();
            const task = document.getElementById('edit-task').value.trim();
            
            if (title) {
                this.saveBreakdownItem(itemId, title, task);
                this.closeEditModal();
            }
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeEditModal();
        }
    });
}

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞–∑–±–∏–≤–∫–∏
    saveBreakdownItem(itemId, title, task) {
        const item = document.querySelector(`[data-id="${itemId}"]`);
        const titleElement = item.querySelector('.breakdown-title');
        const taskElement = item.querySelector('.breakdown-task');
        
        titleElement.textContent = title;
        taskElement.textContent = task || '';
    }

    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    closeEditModal() {
        const modal = document.getElementById('edit-breakdown-modal');
        if (modal) {
            modal.classList.remove('active');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }
    }

    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–∞–∑–±–∏–≤–∫–∏
    closePeriodBreakdownModal() {
        const modal = document.getElementById('period-breakdown-modal');
        if (modal) {
            modal.classList.remove('active');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }
    }

    // –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É
    createMap() {
        console.log('üéØ –§–£–ù–ö–¶–ò–Ø createMap –í–´–ó–í–ê–ù–ê!');
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏:', this.newGoalData);
        console.log('–î–∞–Ω–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω–∞:', this.caravanCreationData);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
        const newMap = {
            id: Date.now().toString(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            goal: this.newGoalData.title,
            description: this.newGoalData.description,
            periodType: this.newGoalData.periodType,
            periodDays: this.newGoalData.periodDays,
            customPeriod: this.newGoalData.customPeriod,
            deadline: this.newGoalData.deadline,
            currentStep: 0,
            totalSteps: this.newGoalData.periodDays,
            steps: this.generateMapSteps(),
            createdAt: new Date().toISOString(),
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä–∞–≤–∞–Ω–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ü–µ–ª—å –∫–∞—Ä–∞–≤–∞–Ω–∞
            isCaravanGoal: this.caravanCreationData && this.caravanCreationData.isCaravanGoal,
            caravanName: this.caravanCreationData ? this.caravanCreationData.caravanName : null
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ –º–∞—Å—Å–∏–≤
        this.maps.push(newMap);
        
        // –î–µ–ª–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É —Ç–µ–∫—É—â–µ–π
        this.currentMapId = newMap.id;
        this.currentMap = newMap;
        
        console.log('–ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞. –í—Å–µ–≥–æ –∫–∞—Ä—Ç:', this.maps.length);
        console.log('–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞ ID:', this.currentMapId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—ã –≤ localStorage
        this.saveMapsToStorage();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.closePeriodBreakdownModal();
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ü–µ–ª—å –∫–∞—Ä–∞–≤–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä–∞–≤–∞–Ω –∏ –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∫–∞—Ä–∞–≤–∞–Ω
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω–∞ –≤ createMap:');
        console.log('üîç this.caravanCreationData:', this.caravanCreationData);
        console.log('üîç typeof this.caravanCreationData:', typeof this.caravanCreationData);
        console.log('üîç this.caravanCreationData?.isCaravanGoal:', this.caravanCreationData?.isCaravanGoal);
        
        if (this.caravanCreationData && this.caravanCreationData.isCaravanGoal) {
            console.log('‚úÖ –≠—Ç–æ —Ü–µ–ª—å –∫–∞—Ä–∞–≤–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä–∞–≤–∞–Ω');
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            const caravanData = { ...this.caravanCreationData };
            console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω–∞:', caravanData);
            this.createCaravanWithGoal(newMap, caravanData);
        } else {
            console.log('‚ùå –≠—Ç–æ –ù–ï —Ü–µ–ª—å –∫–∞—Ä–∞–≤–∞–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–∞—Ä—Ç–µ');
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π
            this.renderMapScreen();
        }
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω–∞
        this.caravanCreationData = null;
    }

    // –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä–∞–≤–∞–Ω —Å —Ü–µ–ª—å—é
    createCaravanWithGoal(mapData, caravanCreationData = null) {
        console.log('üöê –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä–∞–≤–∞–Ω–∞ —Å —Ü–µ–ª—å—é:', mapData);
        console.log('üöê –î–∞–Ω–Ω—ã–µ –∫–∞—Ä–∞–≤–∞–Ω–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:', caravanCreationData);
        console.log('üöê –ü—Ä–æ–≤–µ—Ä—è–µ–º caravanModule:', this.caravanModule);
        console.log('üöê –¢–∏–ø caravanModule:', typeof this.caravanModule);
        
        if (this.caravanModule) {
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä–∞–≤–∞–Ω —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π
            const caravanData = {
                name: mapData.caravanName || caravanCreationData?.caravanName || '–ù–æ–≤—ã–π –∫–∞—Ä–∞–≤–∞–Ω',
                type: 'goal',
                goal: mapData.goal,
                description: mapData.description,
                mapId: mapData.id, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∫ –∫–∞—Ä–∞–≤–∞–Ω—É
                createdAt: new Date().toISOString()
            };
            
            console.log('üöê –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ä–∞–≤–∞–Ω–∞:', caravanData);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä–∞–≤–∞–Ω —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å –∫–∞—Ä–∞–≤–∞–Ω–∞
            const newCaravan = this.caravanModule.addCaravan(caravanData);
            
            console.log('–ö–∞—Ä–∞–≤–∞–Ω —Å–æ–∑–¥–∞–Ω:', newCaravan);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ä–∞–≤–∞–Ω–æ–≤ –∏ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —ç–∫—Ä–∞–Ω
            this.currentScreen = 'caravan';
            this.renderCurrentScreen();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            const caravanNavButton = document.querySelector('[data-screen="caravan"]');
            if (caravanNavButton) {
                updateActiveNavButton(caravanNavButton);
            }
            
            // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∫–∞—Ä–∞–≤–∞–Ω–∞, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞—Ä–∞–≤–∞–Ω –≤ —Å–ø–∏—Å–∫–µ
            if (this.caravanModule) {
                this.caravanModule.renderCaravanScreen();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            if (this.caravanModule.showNotification) {
                this.caravanModule.showNotification(
                    `–ö–∞—Ä–∞–≤–∞–Ω "${newCaravan.name}" —Å —Ü–µ–ª—å—é "${mapData.goal}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª "–ö–∞—Ä—Ç–∞".`, 
                    'success'
                );
            }
            
            console.log('‚úÖ –ö–∞—Ä–∞–≤–∞–Ω —Å —Ü–µ–ª—å—é —Å–æ–∑–¥–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ä–∞–≤–∞–Ω–æ–≤.');
        } else {
            console.error('‚ùå –ú–æ–¥—É–ª—å –∫–∞—Ä–∞–≤–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            console.error('‚ùå this.caravanModule:', this.caravanModule);
            console.error('‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:', {
                mapModule: this.mapModule,
                garageModule: this.garageModule,
                caravanModule: this.caravanModule
            });
        }
    }
    
    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
    addNewMap() {
        console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã');
        this.newGoalData = null;
        this.showCreateMapModal();
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É
    switchToMap(mapId) {
        const map = this.maps.find(m => m.id === mapId);
        if (map) {
            this.currentMapId = mapId;
            this.currentMap = map;
            this.saveMapsToStorage(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É
            this.renderMapScreen();
            console.log('–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∫–∞—Ä—Ç—É:', map.goal);
        }
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É
    getCurrentMap() {
        return this.maps.find(m => m.id === this.currentMapId);
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—ã –≤ localStorage
    saveMapsToStorage() {
        try {
            localStorage.setItem('roadToDreamMaps', JSON.stringify(this.maps));
            localStorage.setItem('roadToDreamCurrentMapId', this.currentMapId || '');
            console.log('–ö–∞—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç:', error);
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—ã –∏–∑ localStorage
    loadMapsFromStorage() {
        try {
            const savedMaps = localStorage.getItem('roadToDreamMaps');
            const savedCurrentMapId = localStorage.getItem('roadToDreamCurrentMapId');
            
            if (savedMaps) {
                this.maps = JSON.parse(savedMaps);
                console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ä—Ç –∏–∑ localStorage:', this.maps.length);
            }
            
            if (savedCurrentMapId && this.maps.length > 0) {
                this.currentMapId = savedCurrentMapId;
                this.currentMap = this.maps.find(m => m.id === this.currentMapId);
                if (this.currentMap) {
                    console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞:', this.currentMap.goal);
                } else {
                    // –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
                    this.currentMapId = this.maps[0].id;
                    this.currentMap = this.maps[0];
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç:', error);
            this.maps = [];
            this.currentMapId = null;
            this.currentMap = null;
        }
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
    showMapSelectionModal() {
        console.log('–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç:', this.maps.length);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (this.mapModule && this.mapModule.showMapSelectionModal) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
            this.mapModule.showMapSelectionModal();
            return;
        }
        
        if (this.maps.length <= 1) {
            console.log('–ö–∞—Ä—Ç –º–∞–ª–æ, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É');
            this.addNewMap();
            return;
        }
        
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç');
        
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content map-selection-modal">
                <div class="modal-header">
                    <h3>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É</h3>
                    <button class="modal-close" id="close-map-selection">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="maps-list">
                        ${this.maps.map(map => `
                            <div class="map-item ${map.id === this.currentMapId ? 'current' : ''}" data-map-id="${map.id}">
                                <div class="map-item-header">
                                    <h4 class="map-item-title">${map.goal}</h4>
                                    <div class="map-item-progress">
                                        ${map.currentStep}/${map.totalSteps} –¥–Ω–µ–π
                                    </div>
                                </div>
                                <div class="map-item-description">${map.description}</div>
                                <div class="map-item-actions">
                                    <button class="select-map-btn" data-map-id="${map.id}">
                                        ${map.id === this.currentMapId ? '–¢–µ–∫—É—â–∞—è' : '–í—ã–±—Ä–∞—Ç—å'}
                                    </button>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                    <div class="map-selection-actions">
                        <button class="add-new-map-btn" id="add-new-map-from-selection">
                            + –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ DOM');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å active –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        setTimeout(() => {
            modal.classList.add('active');
            console.log('–ö–ª–∞—Å—Å active –¥–æ–±–∞–≤–ª–µ–Ω –∫ –º–æ–¥–∞–ª—å–Ω–æ–º—É –æ–∫–Ω—É');
        }, 10);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const closeBtn = document.getElementById('close-map-selection');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
                modal.remove();
            });
        } else {
            console.error('–ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        const selectButtons = modal.querySelectorAll('.select-map-btn');
        console.log('–ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞:', selectButtons.length);
        selectButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const mapId = e.target.getAttribute('data-map-id');
                console.log('–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞ —Å ID:', mapId);
                if (this.mapModule && this.mapModule.switchToMap) {
                    this.mapModule.switchToMap(mapId);
                } else {
                    this.switchToMap(mapId);
                }
                modal.remove();
            });
        });
        
        const addNewBtn = document.getElementById('add-new-map-from-selection');
        if (addNewBtn) {
            addNewBtn.addEventListener('click', () => {
                console.log('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
                modal.remove();
                if (this.mapModule && this.mapModule.addNewMap) {
                    this.mapModule.addNewMap();
                } else {
                    this.addNewMap();
                }
            });
        } else {
            console.error('–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω');
                modal.remove();
            }
        });
    }
    

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–≥–æ–≤ –¥–ª—è –∫–∞—Ä—Ç—ã
    generateMapSteps() {
        const steps = [];
        const totalDays = this.newGoalData.periodDays;
        
        for (let i = 0; i < totalDays; i++) {
            steps.push({
                id: `step-${i}`,
                day: i + 1,
                title: `–î–µ–Ω—å ${i + 1}`,
                task: '',
                completed: false
            });
        }
        
        return steps;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ª–µ–Ω—Ç—ã —à–∞–≥–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏)
    renderStepsStrip() {
        const visibleSteps = 4; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —à–∞–≥–æ–≤
        const currentStepIndex = this.currentMap.currentStep;
        const steps = this.currentMap.steps;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥ –∏ —Å–ª–µ–¥—É—é—â–∏–µ (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)
        let startIndex = currentStepIndex; // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
        let endIndex = Math.min(steps.length, startIndex + visibleSteps);
        
        let html = '';
        // –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–≥–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑: –±—É–¥—É—â–∏–µ -> —Ç–µ–∫—É—â–∏–π)
        for (let i = endIndex - 1; i >= startIndex; i--) {
            const step = steps[i];
            const isCurrent = i === currentStepIndex;
            const isCompleted = step.completed;
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏
            if (isCompleted && !isCurrent) {
                continue;
            }
            
            html += `
                <div class="step-container">
                    <div class="step-square ${isCompleted ? 'completed' : ''} ${isCurrent ? 'current' : ''}" 
                         data-step="${i}">
                        <span class="step-number">${step.day}</span>
                        ${isCompleted ? '<div class="checkmark">‚úì</div>' : ''}
                    </div>
                    ${isCurrent && !isCompleted ? `
                        <button class="confirm-step-btn-inline" data-step-index="${i}">
                            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —à–∞–≥
                        </button>
                    ` : ''}
                </div>
            `;
        }
        
        return html;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —à–∞–≥–∞
    showStepConfirmationModal() {
        const currentStepIndex = this.currentMap.currentStep;
        const currentStep = this.currentMap.steps[currentStepIndex];
        
        const modalHTML = `
            <div class="modal-overlay active" id="step-confirmation-modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="modal-title">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h2>
                        <p class="modal-subtitle">–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞—á–∏ –¥–Ω—è ${currentStepIndex + 1}?</p>
                    </div>
                    <div class="modal-body">
                        <div class="step-confirmation-info">
                            <div class="step-confirmation-number">–î–µ–Ω—å ${currentStepIndex + 1}</div>
                            <div class="step-confirmation-task">${currentStep?.task || '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è'}</div>
                        </div>
                        <div class="confirmation-warning">
                            <svg class="warning-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                            </svg>
                            <div class="warning-text">–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.</div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" id="confirmation-cancel-btn">–û—Ç–º–µ–Ω–∞</button>
                        <button class="btn btn-primary" id="confirmation-confirm-btn">
                            <svg class="check-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <polyline points="20,6 9,17 4,12"></polyline>
                            </svg>
                            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.setupStepConfirmationEvents();
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —à–∞–≥–∞
    setupStepConfirmationEvents() {
        const cancelBtn = document.getElementById('confirmation-cancel-btn');
        const confirmBtn = document.getElementById('confirmation-confirm-btn');
        const modal = document.getElementById('step-confirmation-modal');
        
        cancelBtn.addEventListener('click', () => {
            this.closeStepConfirmationModal();
        });
        
        confirmBtn.addEventListener('click', () => {
            this.completeCurrentStep();
            this.closeStepConfirmationModal();
        });
        
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeStepConfirmationModal();
            }
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —à–∞–≥–∞
    closeStepConfirmationModal() {
        const modal = document.getElementById('step-confirmation-modal');
        if (modal) {
            modal.classList.remove('active');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    completeCurrentStep() {
        if (this.currentMap.currentStep >= this.currentMap.totalSteps) {
            console.log('–í—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
            return;
        }
        
        console.log('–ó–∞–≤–µ—Ä—à–∞–µ–º —à–∞–≥:', this.currentMap.currentStep);
        
        // –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        this.currentMap.steps[this.currentMap.currentStep].completed = true;
        this.currentMap.currentStep++;
            
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        this.saveMapProgress();
            
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ä–∞–∑—É –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
        this.renderMapScreen();
    }
    
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞—Ä—Ç—ã
    saveMapProgress() {
        try {
            localStorage.setItem('currentMap', JSON.stringify(this.currentMap));
            console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞—Ä—Ç—ã
    loadMapProgress() {
        try {
            const savedMap = localStorage.getItem('currentMap');
            if (savedMap) {
                this.currentMap = JSON.parse(savedMap);
                console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω');
                return true;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        }
        return false;
    }
    
    // –°–±—Ä–æ—Å –∫–∞—Ä—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–π
    resetMap() {
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
        this.currentMap = null;
        
        // –û—á–∏—â–∞–µ–º localStorage
        try {
            localStorage.removeItem('currentMap');
            console.log('–ö–∞—Ä—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ localStorage:', error);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—É—Å—Ç–æ–º—É —ç–∫—Ä–∞–Ω—É –∫–∞—Ä—Ç—ã
        this.renderMapScreen();
    }




    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
    getPeriodDays(period) {
        const periodDays = {
            'week': 7,
            'month': 28,
            'quarter': 84,
            'half-year': 168,
            'year': 336
        };
        return periodDays[period] || 7;
    }


    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —ç–∫—Ä–∞–Ω–∞ –≥–∞—Ä–∞–∂–∞ (fallback)
    renderGarageScreen() {
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback renderGarageScreen - –º–æ–¥—É–ª—å –≥–∞—Ä–∞–∂–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        const appContainer = document.getElementById('app-container');
        if (!appContainer) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä app-container –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ fallback!');
            return;
        }
        
        appContainer.innerHTML = `
            <div class="garage-screen">
                <div class="profile-header-premium">
                    <div class="profile-background"></div>
                    <div class="profile-content">
                        <div class="profile-avatar-container">
                            <img id="user-avatar-img" class="profile-avatar" src="" alt="–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                            <div class="level-badge">
                                <span id="user-level">1</span>
                            </div>
                        </div>
                        <div class="profile-info">
                            <h1 id="user-name" class="profile-name">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</h1>
                            <p class="profile-subtitle">–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Ü–µ–ª–µ–π</p>
                            <div class="level-progress-container">
                                <div class="level-info">
                                    <span>–£—Ä–æ–≤–µ–Ω—å <span id="current-level">1</span></span>
                                    <span><span id="current-exp">0</span>/<span id="next-level-exp">100</span> –æ–ø—ã—Ç–∞</span>
                                </div>
                                <div class="level-progress-bar">
                                    <div id="level-progress" class="level-progress-fill" style="width: 0%"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="quick-stats">
                    <div class="quick-stat-card">
                        <div class="stat-icon-new">üéØ</div>
                        <div class="stat-value-new" id="completed-goals">0</div>
                        <div class="stat-label-new">–¶–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                    </div>
                    <div class="quick-stat-card">
                        <div class="stat-icon-new">üî•</div>
                        <div class="stat-value-new" id="current-streak">0</div>
                        <div class="stat-label-new">–î–Ω–µ–π –ø–æ–¥—Ä—è–¥</div>
                    </div>
                    <div class="quick-stat-card">
                        <div class="stat-icon-new">üë£</div>
                        <div class="stat-value-new" id="total-steps">0</div>
                        <div class="stat-label-new">–í—Å–µ–≥–æ —à–∞–≥–æ–≤</div>
                    </div>
                </div>
                <div class="section-card">
                    <div class="section-header">
                        <h3>–ú–æ–¥—É–ª—å –≥–∞—Ä–∞–∂–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</h3>
                        <span class="badge-count">Fallback</span>
                    </div>
                    <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É garage.js —Ñ–∞–π–ª–∞</p>
                </div>
            </div>
        `;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–≤–∞—Ç–∞—Ä
        const avatarImg = document.getElementById('user-avatar-img');
        if (avatarImg) {
            const svg = `<svg width="100" height="100" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
<defs>
<linearGradient id="avatarGradient" x1="0%" y1="0%" x2="100%" y2="100%">
<stop offset="0%" style="stop-color:#f4bd41;stop-opacity:1" />
<stop offset="100%" style="stop-color:#007bff;stop-opacity:1" />
</linearGradient>
</defs>
<circle cx="50" cy="50" r="50" fill="url(#avatarGradient)"/>
<text x="50" y="60" font-family="Arial, sans-serif" font-size="36" font-weight="bold" text-anchor="middle" fill="#1a1a1a">U</text>
</svg>`;
            avatarImg.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svg)));
        }
    }
    

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
    setupTelegramWebApp() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Telegram
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            tg.ready();
            tg.expand();
            
            console.log('Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
            console.log('Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        }
    }




}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
function setupNavigation() {
    const navigation = document.getElementById('navigation');
    
    if (!navigation) {
        console.warn('–ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤—Å—é –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation.addEventListener('click', (event) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navButton = event.target.closest('.nav-btn');
        
        if (!navButton) {
            return; // –ö–ª–∏–∫ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        }
        
        // –ü–æ–ª—É—á–∞–µ–º data-screen –∞—Ç—Ä–∏–±—É—Ç
        const targetScreenId = navButton.getAttribute('data-screen');
        
        if (!targetScreenId) {
            console.warn('–ö–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ data-screen');
        return;
    }
    
        // –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –∫–∞—Ä—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –æ–Ω–∞
        if (targetScreenId === 'map' && window.roadToDreamApp) {
            // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª—é—Å–∏–∫), —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
            if (navButton.classList.contains('active')) {
                console.log('–ö–ª–∏–∫ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–µ (–ø–ª—é—Å–∏–∫) - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É');
                if (window.roadToDreamApp.mapModule && window.roadToDreamApp.mapModule.addNewMap) {
                    window.roadToDreamApp.mapModule.addNewMap();
                } else {
                    window.roadToDreamApp.addNewMap();
                }
                return;
            } else {
                console.log('–ö–ª–∏–∫ –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–µ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–∞—Ä—Ç—É');
                // –û–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω –∫–∞—Ä—Ç—ã
            }
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω
        switchToScreen(targetScreenId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        updateActiveNavButton(navButton);
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
function switchToScreen(screenId) {
        console.log(`–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —ç–∫—Ä–∞–Ω: ${screenId}`);
        
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        if (window.roadToDreamApp) {
        window.roadToDreamApp.showScreen(screenId);
    }
}

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    function updateActiveNavButton(activeButton) {
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å active —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        const allNavButtons = document.querySelectorAll('.nav-btn');
        allNavButtons.forEach(button => {
            button.classList.remove('active');
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å active –∫ —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ
        activeButton.classList.add('active');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        updateMapIcon();
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫–∞—Ä—Ç—ã
    function updateMapIcon() {
        const mapButton = document.querySelector('[data-screen="map"]');
        if (!mapButton) return;
        
        const icon = mapButton.querySelector('.nav-icon');
        if (!icon) return;
        
        if (mapButton.classList.contains('active')) {
            // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª—é—Å–∏–∫
            icon.innerHTML = `
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
            `;
        } else {
            // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∏–∫–æ–Ω–∫—É –∫–∞—Ä—Ç—ã
            icon.innerHTML = `
                <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                <polyline points="9,22 9,12 15,12 15,22"></polyline>
            `;
        }
    }

// –§—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    setupNavigation();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        window.roadToDreamApp = new RoadToDreamApp();
});
