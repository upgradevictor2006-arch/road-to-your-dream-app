// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –Ω–æ–≤—ã–º API
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≤–∞—à script.js

class APIIntegration {
    constructor() {
        this.baseURL = "https://road-to-your-dream-app-imtd.onrender.com";
        this.user = null;
    }

    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp
    async authWithTelegram() {
        try {
            if (!window.Telegram?.WebApp?.initDataUnsafe?.user) {
                console.log('Telegram WebApp –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
                return null;
            }

            const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
            
            const authData = {
                telegram_id: tgUser.id,
                username: tgUser.username,
                first_name: tgUser.first_name,
                last_name: tgUser.last_name,
                photo_url: tgUser.photo_url
            };

            console.log('üîê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authData);

            const response = await fetch(`${this.baseURL}/auth/telegram`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(authData)
            });

            if (response.ok) {
                const userData = await response.json();
                this.user = userData;
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', userData);
                return userData;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response.status);
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            return null;
        }
    }

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserData(telegramId) {
        try {
            const response = await fetch(`${this.baseURL}/users/${telegramId}/data`);
            
            if (response.ok) {
                const userData = await response.json();
                console.log('üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', userData);
                return userData;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', response.status);
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            return null;
        }
    }

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–π
    async createGoals(telegramId, goals) {
        try {
            const response = await fetch(`${this.baseURL}/goals`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    telegram_id: telegramId,
                    goals: goals
                })
            });

            if (response.ok) {
                const result = await response.json();
                console.log('üéØ –¶–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã:', result);
                return result;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–µ–π:', response.status);
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–µ–π:', error);
            return null;
        }
    }

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç
    async createCards(telegramId, cards) {
        try {
            const response = await fetch(`${this.baseURL}/cards`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    telegram_id: telegramId,
                    cards: cards
                })
            });

            if (response.ok) {
                const result = await response.json();
                console.log('üÉè –ö–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:', result);
                return result;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç:', response.status);
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç:', error);
            return null;
        }
    }

    // 5. –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    async completeAction(telegramId) {
        try {
            const response = await fetch(`${this.baseURL}/actions/complete`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    telegram_id: telegramId
                })
            });

            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ:', result);
                return result;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è:', response.status);
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è:', error);
            return null;
        }
    }

    // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç AI
    async getAIMotivation(event) {
        try {
            const response = await fetch(`${this.baseURL}/ai/motivation`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    event: event
                })
            });

            if (response.ok) {
                const result = await response.json();
                console.log('ü§ñ AI –º–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', result);
                return result;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏:', response.status);
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏:', error);
            return null;
        }
    }

    // 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserCards(telegramId, cardType = null, status = null) {
        try {
            let url = `${this.baseURL}/cards/${telegramId}`;
            const params = new URLSearchParams();
            
            if (cardType) params.append('card_type', cardType);
            if (status) params.append('status', status);
            
            if (params.toString()) {
                url += '?' + params.toString();
            }

            const response = await fetch(url);
            
            if (response.ok) {
                const cards = await response.json();
                console.log('üÉè –ö–∞—Ä—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:', cards);
                return cards;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç:', response.status);
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç:', error);
            return null;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
window.apiIntegration = new APIIntegration();
